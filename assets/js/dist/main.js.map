{"version":3,"sources":["assets/js/dist/node_modules/browser-pack/_prelude.js","assets/js/dist/assets/js/src/function-invocations.js","assets/js/dist/assets/js/src/generators.js","assets/js/dist/assets/js/src/hoisting.js","assets/js/dist/assets/js/src/linked-lists.js","assets/js/dist/assets/js/src/main.js","assets/js/dist/assets/js/src/promises.js","assets/js/dist/assets/js/src/queues.js","assets/js/dist/assets/js/src/recursions.js","assets/js/dist/assets/js/src/stacks.js","assets/js/dist/assets/js/src/utils/comparator.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const einie = {\n  e: 'E',\n  m: 'm',\n  c: 'c',\n  getMassEquation: function () {\n    return this.m + '=' + this.e + '/' + this.c + '*' + this.c;\n  }\n};\n\nclass FunctionInvocations {\n  simpleBindFunc () {\n    const massEquation = function () {\n      console.log(this.getMassEquation());\n\n      console.log(this.m);\n      console.log(this.e);\n      console.log(this.c);\n    }.bind(einie)();\n  }\n\n  simpleCallApplyFunc () {\n    const createRealEnergyEquation = function (momentum) {\n      console.log(this.e + ' = ' + this.m + '(' + this.c + '*' + this.c + ') + (' + momentum + this.c + ')' + '(' + momentum + this.c + ')');\n    };\n    createRealEnergyEquation.call(einie, 'p');\n    createRealEnergyEquation.apply(einie, ['p']);\n  }\n\n  currying () {\n    const meetInspirationalPerson = function (birthDate, profession) {\n      const hello = birthDate < 1000 ? 'Hi oldie! ' : 'Hi there! ';\n\n      switch (profession) {\n        case 'phisicist':\n          return hello + 'Did you know that E = mc2 is not the full equation?';\n\n        case 'engineer':\n          return hello + 'Did you know that Nikola Tesla tricked Morgan to build his tower to make his electromagnetical experiments?';\n\n        default:\n          return hello + 'Did you know that Leonardo da Vinci had no formal education?';\n      }\n    };\n\n    const greetOldEngineer = meetInspirationalPerson.bind(null, 600);\n    console.log(greetOldEngineer());\n    console.log(greetOldEngineer('engineer'));\n  }\n\n  curryingEinie () {\n    const meetEinie = function (birthDate) {\n      const hello = birthDate < 1000 ? 'Hi oldie! ' : 'Hi body! ';\n\n      return hello + 'Did you know that ' + this.getMassEquation() + ' is not actually full equation?';\n    };\n\n    const greetEinie = meetEinie.bind(einie);\n    console.log(greetEinie(1992) === meetEinie.call(einie, 1992));\n    console.log(meetEinie.apply(einie, [1992]));\n  }\n\n  arrayLikeObjects () {\n    const energyTypes = {\n      0: 'Potential',\n      1: 'Kinetic',\n      2: 'Gravitional',\n      3: 'Chemical',\n      4: 'Nuclear',\n      5: 'Elastic',\n      6: 'Motion',\n      7: 'Thermal',\n      length: 8\n    };\n\n    console.log(Array.prototype.slice.call(energyTypes, 0));\n    console.log(Array.prototype.reverse.call(energyTypes, 0));\n\n    // using argumets\n    const listMeWithCommas = function () {\n      const args = Array.prototype.slice.call(arguments);\n\n      let filtered = args.filter(a => {\n        const joined = a.join(', ');\n\n        console.log(joined);\n      });\n    };\n    listMeWithCommas(Array.prototype.slice.call(energyTypes, 0));\n  }\n\n  variadicFuncs () {\n    const pi = [3, 1, 4, 1, 5, 9];\n    const people = [\n      'Albert Einstein',\n      'Nikola Tesla',\n      'Leonadro da Vinci'\n    ];\n    const meetThemAll = function () {\n      const args = Array.prototype.slice.call(arguments);\n      const last = args.pop();\n\n      return 'Meet ' + args.join(', ') + ', and ' + last + '.';\n    };\n\n    console.log(Math.max.apply(null, pi));\n    console.log(meetThemAll.apply(null, people));\n  }\n\n  run () {\n    this.simpleBindFunc();\n    this.simpleCallApplyFunc();\n    this.currying();\n    this.curryingEinie();\n    this.arrayLikeObjects();\n    this.variadicFuncs();\n  }\n}\n\nexport default FunctionInvocations;\n","class Generators {\n  simpleGenerator () {\n    function *gen () {\n      yield 1;\n      yield 2;\n\n      return 3;\n    }\n    let it = gen();\n    console.log('simpleGenerator', it.next());\n    console.log('simpleGenerator', it.next());\n    console.log('simpleGenerator', it.next()); // done: true with no value\n  }\n\n  playingWithGenerator () {\n    function *gen (x) {\n      console.log('x', x); // => 5 in 1st iteration\n      let y = 2 * (yield (x + 1));\n      console.log('y', y);\n      let z = yield y / 3; // => 12 in 2nd iteration\n      console.log(z);\n      return x + y + z;\n    }\n\n    let it = gen(4);\n    console.log('playingWithGenerator', it.next().value);\n    console.log('playingWithGenerator', it.next(6).value);\n    console.log('playingWithGenerator', it.next(2).value);\n  }\n\n  async () {\n    const fetch = () => new Promise ((resolve) => {\n      setTimeout(() => resolve(100), 2000);\n    });\n\n    const promiseFunc = () => new Promise((resolve) => {\n      fetch().then(res => {\n        resolve(res + 1);\n      });\n    });\n\n    promiseFunc().then(res => console.log(res));\n  }\n\n  asyncAwait () {\n    const fetch = () => new Promise ((resolve) => {\n      setTimeout(() => resolve('The reason I do it is '), 1000);\n    });\n\n    async function asyncFunc () {\n      const result = await fetch();\n\n      return result + 'to keep learning.';\n    }\n\n    asyncFunc().then(result => console.log(result));\n  }\n\n  bridgeOfDeath () {\n    function *bridgeRiddle () {\n      const riddle = yield 'What is it that belongs to you but others use it more than you?';\n      console.log(riddle);\n\n      if (riddle !== 'My name') return 'You shall not pass!';\n\n      return 'You shall pass.';\n    }\n\n    const bridge = bridgeRiddle();\n    const q = bridge.next().value;\n    console.log(q);\n    const a = bridge.next(prompt()).value;\n    console.log(a);\n  }\n\n  run () {\n    // this.simpleGenerator();\n    // this.playingWithGenerator();\n    // this.async();\n    this.asyncAwait();\n    this.bridgeOfDeath();\n  }\n}\n\nexport default Generators;\n","class Hoisting {\n  logs () {\n    console.log(typeof nonexisting); // undefined\n    // console.log(nonexisting); // referenceError not defined\n  }\n\n  hoist () {\n    function scoped() {\n      // a = 0;\n      var b = 100;\n      console.log('Some code...');\n\n      // It converts into\n      // var b;\n      // console.log('Some code...');\n      // b = 100;\n    }\n\n    scoped();\n    // console.log(a); // refErr\n    // console.log(b);\n  }\n\n  esnext () {\n    const intouchable = 0;\n\n    console.log(intouchable);\n    // intouchable  = 1; // err\n  }\n\n  run () {\n    this.logs();\n    this.hoist();\n    this.esnext();\n  }\n}\n\nexport default Hoisting;\n","import Comparator from \"./utils/comparator\";\n\nexport default class LinkedLists {\n    static run () {\n        const linkedList = new LinkedList();\n\n        linkedList.append(100);\n        console.log(linkedList.toString());\n        linkedList.prepend(0.5);\n        console.log(linkedList.toString());\n        linkedList.append(5);\n        console.log(linkedList.toString());\n        linkedList.prepend(0.1);\n        console.log(linkedList.toString());\n        linkedList.remove(5);\n        console.log(linkedList.toString());\n\n        console.log(linkedList);\n        console.log(linkedList.find(0.5));\n\n    }\n}\n\nexport class LinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n\n        this.length = 0;\n\n        this.compare = new Comparator();\n    }\n\n    prepend (val) {\n        const newNode = new LinkedListNode(val, this.head);\n\n        this.head = newNode;\n\n        if (!this.tail) {\n            this.tail = newNode;\n        }\n\n        this.length++;\n\n        return this;\n    }\n\n    append (val) {\n        const newNode = new LinkedListNode(val);\n\n        if (!this.head) {\n            this.head = newNode;\n            this.tail = newNode;\n        } else {\n            this.tail.next = newNode;\n            this.tail = newNode;\n        }\n\n        this.length++;\n\n        return this;\n    }\n\n    remove (val) {\n        if (!this.head) {\n            return null;\n        }\n\n        let deletedNode = null;\n\n        while (this.head && this.compare.equal(this.head.value, val)) {\n            deletedNode = this.head;\n            this.head = this.head.next;\n        }\n\n        let currentNode = this.head;\n\n        if (currentNode !== null) {\n            while (currentNode.next) {\n                if (this.compare.equal(currentNode.next.value, val)) {\n                    deletedNode = currentNode.next;\n                    currentNode.next = currentNode.next.next;\n                } else {\n                    currentNode = currentNode.next;\n                }\n            }\n        }\n\n        if (this.compare.equal(this.tail.value, val)) {\n            this.tail = currentNode;\n        }\n\n        return deletedNode;\n    }\n\n    find (val = null) {\n        if (!this.head) {\n            return null;\n        }\n\n        let currentNode = this.head;\n\n        while (currentNode) {\n            if (val !== null && this.compare.equal(currentNode.value, val)) {\n                return currentNode;\n            }\n\n            currentNode = currentNode.next;\n        }\n\n        return null;\n    }\n\n    deleteHead () {\n        if (!this.head) {\n            return null;\n        }\n\n        const deletedHead = this.head;\n\n        if (this.head.next) {\n            this.head = this.head.next;\n        } else {\n            this.head = null;\n            this.tail = null;\n        }\n\n        return deletedHead;\n    }\n\n    deleteTail () {\n        const deletedTail = this.tail;\n\n        if (this.head === this.tail) {\n            this.head = null;\n            this.tail = null;\n\n            return deletedTail;\n        }\n\n        let currentNode = this.head;\n\n        while (currentNode.next) {\n            if (!currentNode.next.next) {\n                currentNode.next = null;\n            } else {\n                currentNode = currentNode.next;\n            }\n        }\n\n        this.tail = currentNode;\n\n        return deletedTail;\n    }\n\n    toArray() {\n        const nodes = [];\n\n        let currentNode = this.head;\n\n        while (currentNode) {\n            nodes.push(currentNode);\n            currentNode = currentNode.next;\n        }\n\n        return nodes;\n    }\n\n    toString(callback) {\n        return this.toArray().map((node) => node.toString(callback)).toString();\n    }\n}\n\nclass LinkedListNode {\n    constructor (value, next = null) {\n        this.value = value;\n        this.next = next;\n    }\n\n    toString(callback) {\n        return callback ? callback(this.value) : `${this.value}`;\n    }\n}\n","import Hoisting from './hoisting.js';\nimport Promises from './promises.js';\nimport Generators from './generators.js';\nimport FunctionInvocations from './function-invocations.js';\nimport Recursions from './recursions.js';\nimport LinkedLists from './linked-lists.js';\nimport Queues from \"./queues\";\nimport Stacks from \"./stacks\";\n\nclass Main {\n  constructor () {\n    this.hoisting = new Hoisting();\n    this.promises = new Promises();\n    this.generators = new Generators();\n    this.functionInvocations = new FunctionInvocations();\n    this.recursions = new Recursions();\n  }\n\n  static run () {\n    // this.hoisting.run();\n    // this.promises.run();\n    // this.generators.run();\n    // this.functionInvocations.run();\n    // this.recursions.run();\n\n    LinkedLists.run();\n    Queues.run();\n    Stacks.run();\n  }\n}\n\nMain.run();\n","class Promises {\n  getWorkDone () {\n    return new Promise(function (resolve, reject) {\n      resolve('Well done.');\n      reject('Not this time.');\n    });\n  }\n\n  read () {\n    return Promise(function (resolve, reject) {\n      resolve('Cause is resolving this in the \"Neauromancer\".');\n      reject('Oww, I don\\'t even remember what\\'s what.');\n    });\n  }\n\n  goSleep () {\n    return new Promise(function (resolve, reject) {\n      var req = new XMLHttpRequest();\n          req.open('GET', 'http://google.pl');\n\n      resolve(req);\n      reject('Offline.');\n    });\n  }\n\n  chaining () {\n    var fakeXhr = function () {\n      return new Promise(function (resolve, reject) {\n        var incoming = setTimeout(function () {\n          resolve('Done.');\n        }, 1000);\n\n        return incoming;\n      });\n    };\n    var transformRes = function (res) {\n      return String(res).toUpperCase();\n    };\n\n    fakeXhr().then(function (res) {\n      return transformRes(res);\n    }).then(function (res) {\n      console.log(res);\n    }, function (err) {\n      console.error(err);\n    });\n\n    var gotIt = function (res) {\n      return transformRes(res);\n    };\n\n    fakeXhr() // so beutiful :D\n      .then(gotIt)\n      .then(function (gotIt) {\n        console.log(gotIt);\n      });\n  }\n\n  chaining2 () {\n    var time = function () {\n      return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          var msg = 'Another promise.';\n          console.log(msg);\n          resolve(msg);\n        }, 2000);\n      });\n    };\n    var moreTime = function () {\n      return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          var msg = 'And another one...';\n          console.log(msg);\n          resolve(msg);\n        }, 2000);\n      });\n    };\n    time()\n      .then(moreTime);\n  }\n\n  transformRes (res) {\n    return String(res).toUpperCase();\n  };\n\n  req (done) {\n    var xhr = new XMLHttpRequest();\n        xhr.open('GET', '/');\n        xhr.onload = function () {\n          done(null, xhr.response);\n        };\n        xhr.onerror = function () {\n          done(xhr.response);\n        };\n        xhr.send();\n\n    return xhr;\n  };\n\n  race () {\n    Promise.race([\n      new Promise(function (resolve, reject) {\n        setTimeout(() => reject(new Error('Some possible timeout err.')), 1)\n      }),\n      fetch('/')\n    ])\n    .then(response => console.log(response))\n    .catch(err => console.log(err));\n  }\n\n  run () {\n    this.chaining();\n    this.chaining2();\n    this.req(function (err, data) {\n      if (err) {\n        throw err;\n        return;\n      }\n      console.log(data.length);\n    });\n    this.race();\n  }\n}\n\nexport default Promises;\n","import {LinkedList} from './linked-lists';\n\nexport default class Queues {\n    static run () {\n        const queue = new Queue();\n\n        queue.enqueue(1);\n        console.log(queue.toString());\n        queue.enqueue(3);\n        console.log(queue.toString());\n        queue.enqueue(5);\n        console.log(queue.toString());\n        queue.dequeue();\n        console.log('after dequeue', queue.toString());\n        queue.enqueue(1);\n        console.log('after enqueue', queue.toString());\n    }\n}\n\nclass Queue {\n    constructor() {\n        this.linkedList = new LinkedList();\n    }\n\n    isEmpty () {\n        return !this.linkedList.tail;\n    }\n\n    peek () {\n        if (!this.linkedList.head) {\n            return null;\n        } else {\n            return this.linkedList.head.value;\n        }\n    }\n\n    enqueue (value) {\n        this.linkedList.append(value);\n    }\n\n    dequeue () {\n        const removedHead = this.linkedList.deleteHead();\n\n        return removedHead ? removedHead.value : null;\n    }\n\n    toString(callback) {\n        return this.linkedList.toString(callback);\n    }\n}\n","class Recursions {\n  fractorial () {\n    const fractorial = n => {\n      if (n < 0) throw Error('It\\'s fractorial man...');\n      if (n === 0) return 1;\n\n      const result = n * (fractorial(n - 1));\n\n      return result;\n    };\n    console.log(fractorial(170)); // max\n  }\n\n  getMax () {\n    const sampleArr = [0,1,2,3,4,5, 10, 6,7,8,9];\n    const getMax = arr => {\n      const nums = arr.slice();\n\n      if (nums.length === 1) return nums[0];\n      if (nums[0] < nums[1]) {\n        nums.splice(0, 1);\n      } else {\n        nums.splice(1, 1);\n      }\n\n      return getMax(nums);\n    };\n    console.log(getMax(sampleArr));\n  }\n\n  swimmingCounting() {\n    const iterate = n => {\n      console.time('iterate');\n      for (let i = 1; i <= n; i++) {\n        if (i === n) {\n          console.timeEnd('iterate');\n          console.log('Break.');\n        }\n      }\n    };\n    const recurse = n => {\n      console.time('recurse');\n      if (n === 0) {\n        console.timeEnd('recurse');\n        console.log('Break.');\n      } else {\n        let nn = n - 1;\n        recurse(nn);\n      }\n      // console.log(n); // for loop :D\n    };\n    iterate(8001);\n    recurse(7379); // call stack size -(+degree)\n  }\n\n  grow () {\n    const grow = n => {\n      if (n <= 0) {\n        return 0;\n      }\n      else if (n <= 2) {\n        return 1;\n      } else {\n        return grow(n - 1) + grow(n - 2);\n      }\n    };\n    console.log(grow(8));\n  }\n\n  reverseString () {\n    const reverseString = string => {\n      if (string === \"\") {\n        return \"\";\n      } else {\n        return reverseString(string.substring(1)) + string.charAt(0);\n      }\n    };\n    console.log(reverseString('live ,evil'));\n  }\n\n  run () {\n    this.fractorial();\n    this.getMax();\n    this.swimmingCounting();\n    this.grow();\n    this.reverseString();\n  }\n}\n\nexport default Recursions;\n","import {LinkedList} from './linked-lists';\n\nexport default class Stacks {\n    static run () {\n        const stack = new Stack();\n\n        stack.push(1);\n        console.log(stack.toString());\n        stack.push(3);\n        console.log(stack.toString());\n        stack.push(5);\n        console.log(stack.toString());\n        stack.pop();\n        console.log('after pop', stack.toString());\n        stack.push(100);\n        console.log('after push', stack.toString());\n        stack.pop();\n        console.log('after pop', stack.toString());\n    }\n}\n\nclass Stack {\n    constructor() {\n        this.linkedList = new LinkedList();\n    }\n\n    isEmpty () {\n        return !this.linkedList.tail;\n    }\n\n    peek () {\n        if (this.isEmpty()) {\n            return null;\n        } else {\n            return this.linkedList.tail.value;\n        }\n    }\n\n    push (value) {\n        this.linkedList.append(value);\n    }\n\n    pop () {\n        const removedTail = this.linkedList.deleteTail();\n\n        return removedTail ? removedTail.value : null;\n    }\n\n    toString(callback) {\n        return this.linkedList.toString(callback);\n    }\n}\n","export default class Comparator {\n    constructor() {\n        this.compare = Comparator.defaultCompareFunction;\n    }\n\n    /**\n     * @param {(string|number)} a\n     * @param {(string|number)} b\n     * @returns {number}\n     */\n    static defaultCompareFunction(a, b) {\n        if (a === b) {\n            return 0;\n        }\n\n        return a < b ? -1 : 1;\n    }\n\n    equal(a, b) {\n        return this.compare(a, b) === 0;\n    }\n\n    lessThan(a, b) {\n        return this.compare(a, b) < 0;\n    }\n\n    greaterThan(a, b) {\n        return this.compare(a, b) > 0;\n    }\n\n    lessThanOrEqual(a, b) {\n        return this.lessThan(a, b) || this.equal(a, b);\n    }\n\n    greaterThanOrEqual(a, b) {\n        return this.greaterThan(a, b) || this.equal(a, b);\n    }\n\n    reverse() {\n        const compareOriginal = this.compare;\n        this.compare = (a, b) => compareOriginal(b, a);\n    }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}