{"version":3,"sources":["assets/js/dist/node_modules/browserify/node_modules/browser-pack/_prelude.js","assets/js/dist/assets/js/src/function-invocations.js","assets/js/dist/assets/js/src/generators.js","assets/js/dist/assets/js/src/hoisting.js","assets/js/dist/assets/js/src/main.js","assets/js/dist/assets/js/src/promises.js","assets/js/dist/assets/js/src/recursions.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","const einie = {\n  e: 'E',\n  m: 'm',\n  c: 'c',\n  getMassEquation: function () {\n    return this.m + '=' + this.e + '/' + this.c + '*' + this.c;\n  }\n};\n\nclass FunctionInvocations {\n  simpleBindFunc () {\n    const massEquation = function () {\n      console.log(this.getMassEquation());\n\n      console.log(this.m);\n      console.log(this.e);\n      console.log(this.c);\n    }.bind(einie)();\n  }\n\n  simpleCallApplyFunc () {\n    const createRealEnergyEquation = function (momentum) {\n      console.log(this.e + ' = ' + this.m + '(' + this.c + '*' + this.c + ') + (' + momentum + this.c + ')' + '(' + momentum + this.c + ')');\n    };\n    createRealEnergyEquation.call(einie, 'p');\n    createRealEnergyEquation.apply(einie, ['p']);\n  }\n\n  currying () {\n    const meetInspirationalPerson = function (birthDate, profession) {\n      const hello = birthDate < 1000 ? 'Hi oldie! ' : 'Hi there! ';\n\n      switch (profession) {\n        case 'phisicist':\n          return hello + 'Did you know that E = mc2 is not the full equation?';\n\n        case 'engineer':\n          return hello + 'Did you know that Nikola Tesla tricked Morgan to build his tower to make his electromagnetical experiments?';\n\n        default:\n          return hello + 'Did you know that Leonardo da Vinci had no formal education?';\n      }\n    };\n\n    const greetOldEngineer = meetInspirationalPerson.bind(null, 600);\n    console.log(greetOldEngineer());\n    console.log(greetOldEngineer('engineer'));\n  }\n\n  curryingEinie () {\n    const meetEinie = function (birthDate) {\n      const hello = birthDate < 1000 ? 'Hi oldie! ' : 'Hi body! ';\n\n      return hello + 'Did you know that ' + this.getMassEquation() + ' is not actually full equation?';\n    };\n\n    const greetEinie = meetEinie.bind(einie);\n    console.log(greetEinie(1992) === meetEinie.call(einie, 1992));\n    console.log(meetEinie.apply(einie, [1992]));\n  }\n\n  arrayLikeObjects () {\n    const energyTypes = {\n      0: 'Potential',\n      1: 'Kinetic',\n      2: 'Gravitional',\n      3: 'Chemical',\n      4: 'Nuclear',\n      5: 'Elastic',\n      6: 'Motion',\n      7: 'Thermal',\n      length: 8\n    };\n\n    console.log(Array.prototype.slice.call(energyTypes, 0));\n    console.log(Array.prototype.reverse.call(energyTypes, 0));\n\n    // using argumets\n    const listMeWithCommas = function () {\n      const args = Array.prototype.slice.call(arguments);\n\n      let filtered = args.filter(a => {\n        const joined = a.join(', ');\n\n        console.log(joined);\n      });\n    };\n    listMeWithCommas(Array.prototype.slice.call(energyTypes, 0));\n  }\n\n  variadicFuncs () {\n    const pi = [3, 1, 4, 1, 5, 9];\n    const people = [\n      'Albert Einstein',\n      'Nikola Tesla',\n      'Leonadro da Vinci'\n    ];\n    const meetThemAll = function () {\n      const args = Array.prototype.slice.call(arguments);\n      const last = args.pop();\n\n      return 'Meet ' + args.join(', ') + ', and ' + last + '.';\n    };\n\n    console.log(Math.max.apply(null, pi));\n    console.log(meetThemAll.apply(null, people));\n  }\n\n  run () {\n    this.simpleBindFunc();\n    this.simpleCallApplyFunc();\n    this.currying();\n    this.curryingEinie();\n    this.arrayLikeObjects();\n    this.variadicFuncs();\n  }\n}\n\nexport default FunctionInvocations;\n","class Generators {\n  simpleGenerator () {\n    function *gen () {\n      yield 1;\n      yield 2;\n\n      return 3;\n    }\n    let it = gen();\n    console.log('simpleGenerator', it.next());\n    console.log('simpleGenerator', it.next());\n    console.log('simpleGenerator', it.next()); // done: true with no value\n  }\n\n  playingWithGenerator () {\n    function *gen (x) {\n      console.log('x', x); // => 5 in 1st iteration\n      let y = 2 * (yield (x + 1));\n      console.log('y', y);\n      let z = yield y / 3; // => 12 in 2nd iteration\n      console.log(z);\n      return x + y + z;\n    }\n\n    let it = gen(4);\n    console.log('playingWithGenerator', it.next().value);\n    console.log('playingWithGenerator', it.next(6).value);\n    console.log('playingWithGenerator', it.next(2).value);\n  }\n\n  async () {\n    const fetch = () => new Promise ((resolve) => {\n      setTimeout(() => resolve(100), 2000);\n    });\n\n    const promiseFunc = () => new Promise((resolve) => {\n      fetch().then(res => {\n        resolve(res + 1);\n      });\n    });\n\n    promiseFunc().then(res => console.log(res));\n  }\n\n  asyncAwait () {\n    const fetch = () => new Promise ((resolve) => {\n      setTimeout(() => resolve('The reason I do it is '), 1000);\n    });\n\n    async function asyncFunc () {\n      const result = await fetch();\n\n      return result + 'to keep learning.';\n    }\n\n    asyncFunc().then(result => console.log(result));\n  }\n\n  bridgeOfDeath () {\n    function *bridgeRiddle () {\n      const riddle = yield 'What is it that belongs to you but others use it more than you?';\n      console.log(riddle);\n\n      if (riddle !== 'My name') return 'You shall not pass!';\n\n      return 'You shall pass.';\n    }\n\n    const bridge = bridgeRiddle();\n    const q = bridge.next().value;\n    console.log(q);\n    const a = bridge.next(prompt()).value;\n    console.log(a);\n  }\n\n  run () {\n    // this.simpleGenerator();\n    // this.playingWithGenerator();\n    // this.async();\n    this.asyncAwait();\n    this.bridgeOfDeath();\n  }\n}\n\nexport default Generators;\n","class Hoisting {\n  logs () {\n    console.log(typeof nonexisting); // undefined\n    // console.log(nonexisting); // referenceError not defined\n  }\n\n  hoist () {\n    function scoped() {\n      // a = 0;\n      var b = 100;\n      console.log('Some code...');\n\n      // It converts into\n      // var b;\n      // console.log('Some code...');\n      // b = 100;\n    }\n\n    scoped();\n    // console.log(a); // refErr\n    // console.log(b);\n  }\n\n  esnext () {\n    const intouchable = 0;\n\n    console.log(intouchable);\n    // intouchable  = 1; // err\n  }\n\n  run () {\n    this.logs();\n    this.hoist();\n    this.esnext();\n  }\n}\n\nexport default Hoisting;\n","import Hoisting from './hoisting.js';\nimport Promises from './promises.js';\nimport Generators from './generators.js';\nimport FunctionInvocations from './function-invocations.js';\nimport Recursions from './recursions.js';\n\nclass Main {\n  constructor () {\n    this.hoisting = new Hoisting();\n    this.promises = new Promises();\n    this.generators = new Generators();\n    this.functionInvocations = new FunctionInvocations();\n    this.recursions = new Recursions();\n  }\n\n  run () {\n    // this.hoisting.run();\n    // this.promises.run();\n    // this.generators.run();\n    this.functionInvocations.run();\n    this.recursions.run();\n  }\n}\n\nvar main = new Main();\nmain.run();\n","class Promises {\n  getWorkDone () {\n    return new Promise(function (resolve, reject) {\n      resolve('Well done.');\n      reject('Not this time.');\n    });\n  }\n\n  read () {\n    return Promise(function (resolve, reject) {\n      resolve('Cause is resolving this in the \"Neauromancer\".');\n      reject('Oww, I don\\'t even remember what\\'s what.');\n    });\n  }\n\n  goSleep () {\n    return new Promise(function (resolve, reject) {\n      var req = new XMLHttpRequest();\n          req.open('GET', 'http://google.pl');\n\n      resolve(req);\n      reject('Offline.');\n    });\n  }\n\n  chaining () {\n    var fakeXhr = function () {\n      return new Promise(function (resolve, reject) {\n        var incoming = setTimeout(function () {\n          resolve('Done.');\n        }, 1000);\n\n        return incoming;\n      });\n    };\n    var transformRes = function (res) {\n      return String(res).toUpperCase();\n    };\n\n    fakeXhr().then(function (res) {\n      return transformRes(res);\n    }).then(function (res) {\n      console.log(res);\n    }, function (err) {\n      console.error(err);\n    });\n\n    var gotIt = function (res) {\n      return transformRes(res);\n    };\n\n    fakeXhr() // so beutiful :D\n      .then(gotIt)\n      .then(function (gotIt) {\n        console.log(gotIt);\n      });\n  }\n\n  chaining2 () {\n    var time = function () {\n      return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          var msg = 'Another promise.';\n          console.log(msg);\n          resolve(msg);\n        }, 2000);\n      });\n    };\n    var moreTime = function () {\n      return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          var msg = 'And another one...';\n          console.log(msg);\n          resolve(msg);\n        }, 2000);\n      });\n    };\n    time()\n      .then(moreTime);\n  }\n\n  transformRes (res) {\n    return String(res).toUpperCase();\n  };\n\n  req (done) {\n    var xhr = new XMLHttpRequest();\n        xhr.open('GET', '/');\n        xhr.onload = function () {\n          done(null, xhr.response);\n        };\n        xhr.onerror = function () {\n          done(xhr.response);\n        };\n        xhr.send();\n\n    return xhr;\n  };\n\n  race () {\n    Promise.race([\n      new Promise(function (resolve, reject) {\n        setTimeout(() => reject(new Error('Some possible timeout err.')), 1)\n      }),\n      fetch('/')\n    ])\n    .then(response => console.log(response))\n    .catch(err => console.log(err));\n  }\n\n  run () {\n    this.chaining();\n    this.chaining2();\n    this.req(function (err, data) {\n      if (err) {\n        throw err;\n        return;\n      }\n      console.log(data.length);\n    });\n    this.race();\n  }\n}\n\nexport default Promises;\n","class Recursions {\n  fractorial () {\n    const fractorial = n => {\n      if (n < 0) throw Error('It\\'s fractorial man...');\n      if (n === 0) return 1;\n\n      const result = n * (fractorial(n - 1));\n\n      return result;\n    }\n    console.log(fractorial(170)); // max\n  }\n\n  getMax () {\n    const sampleArr = [0,1,2,3,4,5, 10, 6,7,8,9];\n    const getMax = arr => {\n      const nums = arr.slice();\n\n      if (nums.length === 1) return nums[0];\n      if (nums[0] < nums[1]) {\n        nums.splice(0, 1);\n      } else {\n        nums.splice(1, 1);\n      }\n\n      return getMax(nums);\n    }\n    console.log(getMax(sampleArr));\n  }\n\n  swimmingCounting() {\n    const iterate = n => {\n      console.time('iterate');\n      for (let i = 1; i <= n; i++) {\n        if (i = n) {\n          console.timeEnd('iterate');\n          console.log('Break.');\n        }\n      }\n    };\n    const recurse = n => {\n      console.time('recurse');\n      if (n === 0) {\n        console.timeEnd('recurse');\n        console.log('Break.');\n      } else {\n        let nn = n - 1;\n        recurse(nn);\n      }\n      // console.log(n); // for loop :D\n    };\n    iterate(8001);\n    recurse(7379); // call stack size -(+degree)\n  }\n\n  grow () {\n    const grow = n => {\n      if (n <= 0) {\n        return 0;\n      }\n      else if (n <= 2) {\n        return 1;\n      } else {\n        return grow(n - 1) + grow(n - 2);\n      }\n    };\n    console.log(grow(8));\n  }\n\n  run () {\n    this.fractorial();\n    this.getMax();\n    this.swimmingCounting();\n    this.grow();\n  }\n}\n\nexport default Recursions;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}