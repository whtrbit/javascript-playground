{"version":3,"sources":["assets/js/dist/node_modules/browser-pack/_prelude.js","assets/js/dist/assets/js/src/function-invocations.js","assets/js/dist/assets/js/src/generators.js","assets/js/dist/assets/js/src/hash-tables.js","assets/js/dist/assets/js/src/heaps.js","assets/js/dist/assets/js/src/hoisting.js","assets/js/dist/assets/js/src/linked-lists.js","assets/js/dist/assets/js/src/main.js","assets/js/dist/assets/js/src/priority-queues.js","assets/js/dist/assets/js/src/promises.js","assets/js/dist/assets/js/src/queues.js","assets/js/dist/assets/js/src/recursions.js","assets/js/dist/assets/js/src/stacks.js","assets/js/dist/assets/js/src/utils/comparator.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const einie = {\n  e: 'E',\n  m: 'm',\n  c: 'c',\n  getMassEquation: function () {\n    return this.m + '=' + this.e + '/' + this.c + '*' + this.c;\n  }\n};\n\nclass FunctionInvocations {\n  simpleBindFunc () {\n    const massEquation = function () {\n      console.log(this.getMassEquation());\n\n      console.log(this.m);\n      console.log(this.e);\n      console.log(this.c);\n    }.bind(einie)();\n  }\n\n  simpleCallApplyFunc () {\n    const createRealEnergyEquation = function (momentum) {\n      console.log(this.e + ' = ' + this.m + '(' + this.c + '*' + this.c + ') + (' + momentum + this.c + ')' + '(' + momentum + this.c + ')');\n    };\n    createRealEnergyEquation.call(einie, 'p');\n    createRealEnergyEquation.apply(einie, ['p']);\n  }\n\n  currying () {\n    const meetInspirationalPerson = function (birthDate, profession) {\n      const hello = birthDate < 1000 ? 'Hi oldie! ' : 'Hi there! ';\n\n      switch (profession) {\n        case 'phisicist':\n          return hello + 'Did you know that E = mc2 is not the full equation?';\n\n        case 'engineer':\n          return hello + 'Did you know that Nikola Tesla tricked Morgan to build his tower to make his electromagnetical experiments?';\n\n        default:\n          return hello + 'Did you know that Leonardo da Vinci had no formal education?';\n      }\n    };\n\n    const greetOldEngineer = meetInspirationalPerson.bind(null, 600);\n    console.log(greetOldEngineer());\n    console.log(greetOldEngineer('engineer'));\n  }\n\n  curryingEinie () {\n    const meetEinie = function (birthDate) {\n      const hello = birthDate < 1000 ? 'Hi oldie! ' : 'Hi body! ';\n\n      return hello + 'Did you know that ' + this.getMassEquation() + ' is not actually full equation?';\n    };\n\n    const greetEinie = meetEinie.bind(einie);\n    console.log(greetEinie(1992) === meetEinie.call(einie, 1992));\n    console.log(meetEinie.apply(einie, [1992]));\n  }\n\n  arrayLikeObjects () {\n    const energyTypes = {\n      0: 'Potential',\n      1: 'Kinetic',\n      2: 'Gravitional',\n      3: 'Chemical',\n      4: 'Nuclear',\n      5: 'Elastic',\n      6: 'Motion',\n      7: 'Thermal',\n      length: 8\n    };\n\n    console.log(Array.prototype.slice.call(energyTypes, 0));\n    console.log(Array.prototype.reverse.call(energyTypes, 0));\n\n    // using argumets\n    const listMeWithCommas = function () {\n      const args = Array.prototype.slice.call(arguments);\n\n      let filtered = args.filter(a => {\n        const joined = a.join(', ');\n\n        console.log(joined);\n      });\n    };\n    listMeWithCommas(Array.prototype.slice.call(energyTypes, 0));\n  }\n\n  variadicFuncs () {\n    const pi = [3, 1, 4, 1, 5, 9];\n    const people = [\n      'Albert Einstein',\n      'Nikola Tesla',\n      'Leonadro da Vinci'\n    ];\n    const meetThemAll = function () {\n      const args = Array.prototype.slice.call(arguments);\n      const last = args.pop();\n\n      return 'Meet ' + args.join(', ') + ', and ' + last + '.';\n    };\n\n    console.log(Math.max.apply(null, pi));\n    console.log(meetThemAll.apply(null, people));\n  }\n\n  run () {\n    this.simpleBindFunc();\n    this.simpleCallApplyFunc();\n    this.currying();\n    this.curryingEinie();\n    this.arrayLikeObjects();\n    this.variadicFuncs();\n  }\n}\n\nexport default FunctionInvocations;\n","class Generators {\n  simpleGenerator () {\n    function *gen () {\n      yield 1;\n      yield 2;\n\n      return 3;\n    }\n    let it = gen();\n    console.log('simpleGenerator', it.next());\n    console.log('simpleGenerator', it.next());\n    console.log('simpleGenerator', it.next()); // done: true with no value\n  }\n\n  playingWithGenerator () {\n    function *gen (x) {\n      console.log('x', x); // => 5 in 1st iteration\n      let y = 2 * (yield (x + 1));\n      console.log('y', y);\n      let z = yield y / 3; // => 12 in 2nd iteration\n      console.log(z);\n      return x + y + z;\n    }\n\n    let it = gen(4);\n    console.log('playingWithGenerator', it.next().value);\n    console.log('playingWithGenerator', it.next(6).value);\n    console.log('playingWithGenerator', it.next(2).value);\n  }\n\n  async () {\n    const fetch = () => new Promise ((resolve) => {\n      setTimeout(() => resolve(100), 2000);\n    });\n\n    const promiseFunc = () => new Promise((resolve) => {\n      fetch().then(res => {\n        resolve(res + 1);\n      });\n    });\n\n    promiseFunc().then(res => console.log(res));\n  }\n\n  asyncAwait () {\n    const fetch = () => new Promise ((resolve) => {\n      setTimeout(() => resolve('The reason I do it is '), 1000);\n    });\n\n    async function asyncFunc () {\n      const result = await fetch();\n\n      return result + 'to keep learning.';\n    }\n\n    asyncFunc().then(result => console.log(result));\n  }\n\n  bridgeOfDeath () {\n    function *bridgeRiddle () {\n      const riddle = yield 'What is it that belongs to you but others use it more than you?';\n      console.log(riddle);\n\n      if (riddle !== 'My name') return 'You shall not pass!';\n\n      return 'You shall pass.';\n    }\n\n    const bridge = bridgeRiddle();\n    const q = bridge.next().value;\n    console.log(q);\n    const a = bridge.next(prompt()).value;\n    console.log(a);\n  }\n\n  run () {\n    // this.simpleGenerator();\n    // this.playingWithGenerator();\n    // this.async();\n    this.asyncAwait();\n    this.bridgeOfDeath();\n  }\n}\n\nexport default Generators;\n","import {LinkedList} from './linked-lists';\n\nexport default class HashTables {\n    static run () {\n        const hashTable = new HashTable();\n\n        hashTable.set('Johnny Five', {\n            iq: 220\n        });\n        hashTable.set('Dr Brown', {\n            iq: 221\n        });\n\n        for (let i = 0; i <= 36; i++) {\n            hashTable.set('Index' + i, {\n                id: i * i\n            });\n        }\n\n        console.log(hashTable);\n        console.log(hashTable.get('Index5'));\n        console.log(hashTable.remove('Index5'));\n        console.log(hashTable.get('Index5'));\n        console.log(hashTable.keys);\n    }\n}\n\nclass HashTable {\n    constructor () {\n        this.buckets = {};\n\n        this.keys = {};\n    }\n\n    convertToHash (key) {\n        var hash = 5381;\n        var i = key.length;\n\n        while (i) {\n            hash = (hash * 33) ^ key.charCodeAt(--i);\n        }\n\n        return hash >>> 0;\n    }\n\n    set (key, value) {\n        const hashKey = this.convertToHash(key);\n        this.keys[key] = hashKey;\n\n        if (!this.buckets[hashKey]) {\n            this.buckets[hashKey] = new LinkedList();\n            this.buckets[hashKey].append({key, value});\n        } else {\n            this.buckets[hashKey] = new LinkedList();\n            this.buckets[hashKey].value.value = value;\n        }\n    }\n\n    get (key) {\n        const bucketLinkedList = this.buckets[this.convertToHash(key)];\n        const node = bucketLinkedList ? bucketLinkedList.find(null, (nodeValue) => nodeValue.key === key) : null;\n\n        return node ? node.value.value : undefined;\n    }\n\n    remove (key) {\n        const hashKey = this.convertToHash(key);\n        delete this.keys[key];\n\n        const bucketLinkedList = this.buckets[hashKey];\n        const node = bucketLinkedList.find(null, (nodeValue) => nodeValue.key === key);\n\n        if (node) {\n            return bucketLinkedList.remove(node.value);\n        }\n\n        return null;\n    }\n\n    has (key) {\n        return Object.hasOwnProperty.call(this.keys, key);\n    }\n}\n","import Comparator from \"./utils/comparator\";\n\nexport default class Heaps {\n    static run () {\n        const heapMin = new HeapMin();\n              heapMin.add(9);\n              heapMin.add(1);\n              heapMin.add(0);\n              heapMin.add(100);\n              heapMin.remove(0);\n              heapMin.add(27);\n\n        const heapMax = new HeapMax();\n              heapMax.add(9);\n              heapMax.add(0);\n              heapMax.add(27);\n              heapMax.add(25);\n              heapMax.remove(27);\n\n        console.log('heapMin\\n', heapMin, '\\n\\n');\n        console.log('heapMax\\n', heapMax, '\\n\\n');\n    }\n}\n\nclass Heap {\n    constructor (comparatorFunction) {\n        this.compare = new Comparator(comparatorFunction);\n\n        this.heapContainer = [];\n    }\n\n    add (item) {\n        this.heapContainer.push(item);\n        this.heapifyUp();\n\n        return this.heapContainer;\n    }\n\n    remove (item, comparator = this.compare) {\n        const numberOfItemsToRemove = this.find(item, comparator).length;\n\n        for (let iteration = 0; iteration < numberOfItemsToRemove; iteration += 1) {\n            const indexToRemove = this.find(item, comparator).pop();\n\n            if (indexToRemove === (this.heapContainer.length - 1)) {\n                this.heapContainer.pop();\n            } else {\n                this.heapContainer[indexToRemove] = this.heapContainer.pop();\n\n                const parentItem = this.getParent(indexToRemove);\n\n                if (\n                    this.hasLeftChild(indexToRemove) &&\n                    (!parentItem || this.pairIsInCorrectOrder(parentItem, this.heapContainer[indexToRemove]))\n                ) {\n                    this.heapifyDown(indexToRemove);\n                } else {\n                    this.heapifyUp(indexToRemove);\n                }\n            }\n        }\n\n        return this.heapContainer;\n    }\n\n    find (item, comparator = this.compare) {\n        const foundItemIndices = [];\n\n        for (let itemIndex = 0; itemIndex < this.heapContainer.length; itemIndex += 1) {\n            if (comparator.equal(item, this.heapContainer[itemIndex])) {\n                foundItemIndices.push(itemIndex);\n            }\n        }\n\n        return foundItemIndices;\n    }\n\n    heapifyUp (customStartIndex) {\n        let currentIndex = customStartIndex || this.heapContainer.length - 1;\n\n        console.log(this.getParent(currentIndex), this.heapContainer[currentIndex], this.pairIsInCorrectOrder(this.getParent(currentIndex), this.heapContainer[currentIndex]));\n\n        while (\n            this.hasParent(currentIndex) &&\n            !this.pairIsInCorrectOrder(this.getParent(currentIndex), this.heapContainer[currentIndex])\n        ) {\n            this.swap(currentIndex, this.getParentIndex(currentIndex));\n            currentIndex = this.getParentIndex(currentIndex);\n        }\n    }\n\n    heapifyDown (customStartIndex = 0) {\n        let currentIndex = customStartIndex;\n        let nextIndex = null;\n\n        while (this.hasLeftChild(currentIndex)) {\n            if (\n                this.hasRightChild(currentIndex) &&\n                this.pairIsInCorrectOrder(this.getRightChild(currentIndex), this.getLeftChild(currentIndex))\n            ) {\n                nextIndex = this.getRightChildIndex(currentIndex);\n            } else {\n                nextIndex = this.getLeftChildIndex(currentIndex);\n            }\n\n            if (this.pairIsInCorrectOrder(this.heapContainer[currentIndex], this.heapContainer[nextIndex])) {\n                break;\n            }\n\n            this.swap(currentIndex, nextIndex);\n            currentIndex = nextIndex;\n        }\n    }\n\n    swap (indexOne, indexTwo) {\n        const tmpSecond = this.heapContainer[indexTwo];\n\n        this.heapContainer[indexTwo] = this.heapContainer[indexOne];\n        this.heapContainer[indexOne] = tmpSecond;\n    }\n\n    hasParent (childIndex) {\n        return this.getParentIndex(childIndex) >= 0;\n    }\n\n    hasLeftChild (parentIndex) {\n        return this.getLeftChildIndex(parentIndex) < this.heapContainer.length;\n    }\n\n    hasRightChild (parentIndex) {\n        return this.getRightChildIndex(parentIndex) < this.heapContainer.length;\n    }\n\n    getParentIndex (childIndex) {\n        return Math.floor((childIndex - 1) / 2);\n    }\n\n    getLeftChildIndex (parentIndex) {\n        return (2 * parentIndex) + 1;\n    }\n\n    getRightChildIndex (parentIndex) {\n        return (2 * parentIndex) + 2;\n    }\n\n    getParent (childIndex) {\n        return this.heapContainer[this.getParentIndex(childIndex)];\n    }\n\n    getLeftChild (parentIndex) {\n        return this.heapContainer[this.getLeftChildIndex(parentIndex)];\n    }\n\n    getRightChild (parentIndex) {\n        return this.heapContainer[this.getRightChildIndex(parentIndex)];\n    }\n\n    pairIsInCorrectOrder (firstItem, secondItem) {\n        throw new Error('Implement comparison method in HeapMax/HeapMin classes.')\n    }\n}\n\nexport class HeapMin extends Heap {\n    constructor () {\n        super();\n    }\n\n    pairIsInCorrectOrder (firstItem, secondItem) {\n        return this.compare.lessThanOrEqual(firstItem, secondItem);\n    }\n}\n\nexport class HeapMax extends Heap {\n    constructor () {\n        super();\n    }\n\n    pairIsInCorrectOrder (firstItem, secondItem) {\n        return this.compare.greaterThanOrEqual(firstItem, secondItem);\n    }\n}","class Hoisting {\n  logs () {\n    console.log(typeof nonexisting); // undefined\n    // console.log(nonexisting); // referenceError not defined\n  }\n\n  hoist () {\n    function scoped() {\n      // a = 0;\n      var b = 100;\n      console.log('Some code...');\n\n      // It converts into\n      // var b;\n      // console.log('Some code...');\n      // b = 100;\n    }\n\n    scoped();\n    // console.log(a); // refErr\n    // console.log(b);\n  }\n\n  esnext () {\n    const intouchable = 0;\n\n    console.log(intouchable);\n    // intouchable  = 1; // err\n  }\n\n  run () {\n    this.logs();\n    this.hoist();\n    this.esnext();\n  }\n}\n\nexport default Hoisting;\n","import Comparator from \"./utils/comparator\";\n\nexport default class LinkedLists {\n    static run () {\n        const linkedList = new LinkedList();\n\n        linkedList.append(100);\n        console.log(linkedList.toString());\n        linkedList.prepend(0.5);\n        console.log(linkedList.toString());\n        linkedList.append(5);\n        console.log(linkedList.toString());\n        linkedList.prepend(0.1);\n        console.log(linkedList.toString());\n        linkedList.remove(5);\n        console.log(linkedList.toString());\n\n        console.log(linkedList);\n        console.log(linkedList.find(0.5));\n\n    }\n}\n\nexport class LinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n\n        this.length = 0;\n\n        this.compare = new Comparator();\n    }\n\n    prepend (val) {\n        const newNode = new LinkedListNode(val, this.head);\n\n        this.head = newNode;\n\n        if (!this.tail) {\n            this.tail = newNode;\n        }\n\n        this.length++;\n\n        return this;\n    }\n\n    append (val) {\n        const newNode = new LinkedListNode(val);\n\n        if (!this.head) {\n            this.head = newNode;\n            this.tail = newNode;\n        } else {\n            this.tail.next = newNode;\n            this.tail = newNode;\n        }\n\n        this.length++;\n\n        return this;\n    }\n\n    remove (val) {\n        if (!this.head) {\n            return null;\n        }\n\n        let deletedNode = null;\n\n        while (this.head && this.compare.equal(this.head.value, val)) {\n            deletedNode = this.head;\n            this.head = this.head.next;\n        }\n\n        let currentNode = this.head;\n\n        if (currentNode !== null) {\n            while (currentNode.next) {\n                if (this.compare.equal(currentNode.next.value, val)) {\n                    deletedNode = currentNode.next;\n                    currentNode.next = currentNode.next.next;\n                } else {\n                    currentNode = currentNode.next;\n                }\n            }\n        }\n\n        if (this.compare.equal(this.tail.value, val)) {\n            this.tail = currentNode;\n        }\n\n        return deletedNode;\n    }\n\n    find (val = null, callback = undefined) {\n        if (!this.head) {\n            return null;\n        }\n\n        let currentNode = this.head;\n\n        while (currentNode) {\n            if (callback && callback(currentNode.value)) {\n                return currentNode;\n            }\n\n            if (val !== null && this.compare.equal(currentNode.value, val)) {\n                return currentNode;\n            }\n\n            currentNode = currentNode.next;\n        }\n\n        return null;\n    }\n\n    deleteHead () {\n        if (!this.head) {\n            return null;\n        }\n\n        const deletedHead = this.head;\n\n        if (this.head.next) {\n            this.head = this.head.next;\n        } else {\n            this.head = null;\n            this.tail = null;\n        }\n\n        return deletedHead;\n    }\n\n    deleteTail () {\n        const deletedTail = this.tail;\n\n        if (this.head === this.tail) {\n            this.head = null;\n            this.tail = null;\n\n            return deletedTail;\n        }\n\n        let currentNode = this.head;\n\n        while (currentNode.next) {\n            if (!currentNode.next.next) {\n                currentNode.next = null;\n            } else {\n                currentNode = currentNode.next;\n            }\n        }\n\n        this.tail = currentNode;\n\n        return deletedTail;\n    }\n\n    toArray() {\n        const nodes = [];\n\n        let currentNode = this.head;\n\n        while (currentNode) {\n            nodes.push(currentNode);\n            currentNode = currentNode.next;\n        }\n\n        return nodes;\n    }\n\n    toString(callback) {\n        return this.toArray().map((node) => node.toString(callback)).toString();\n    }\n}\n\nclass LinkedListNode {\n    constructor (value, next = null) {\n        this.value = value;\n        this.next = next;\n    }\n\n    toString(callback) {\n        return callback ? callback(this.value) : `${this.value}`;\n    }\n}\n","import Hoisting from './hoisting.js';\nimport Promises from './promises.js';\nimport Generators from './generators.js';\nimport FunctionInvocations from './function-invocations.js';\nimport Recursions from './recursions.js';\nimport LinkedLists from './linked-lists.js';\nimport Queues from \"./queues\";\nimport Stacks from \"./stacks\";\nimport HashTables from \"./hash-tables\";\nimport Heaps from \"./heaps\";\nimport PriorityQueues from \"./priority-queues\";\n\nclass Main {\n  constructor () {\n    this.hoisting = new Hoisting();\n    this.promises = new Promises();\n    this.generators = new Generators();\n    this.functionInvocations = new FunctionInvocations();\n    this.recursions = new Recursions();\n  }\n\n  static run () {\n    // this.hoisting.run();\n    // this.promises.run();\n    // this.generators.run();\n    // this.functionInvocations.run();\n    // this.recursions.run();\n\n    // LinkedLists.run();\n    // Queues.run();\n    // Stacks.run();\n    // HashTables.run();\n    // Heaps.run();\n    PriorityQueues.run();\n  }\n}\n\nMain.run();\n","import {HeapMin} from './heaps';\nimport Comparator from \"./utils/comparator\";\n\nexport default class PriorityQueues {\n    static run () {\n        const priorityQueue = new PriorityQueue();\n              priorityQueue.add(100, 0);\n              priorityQueue.add(11, 2);\n              priorityQueue.add(500, 3);\n              priorityQueue.add(501, 4);\n              priorityQueue.add(101, 1);\n\n        console.log(priorityQueue);\n    }\n}\n\nclass PriorityQueue extends HeapMin {\n    constructor () {\n        super();\n\n        this.priorities = {};\n\n        this.compare = new Comparator(this.comparePriority.bind(this));\n    }\n\n    add (item, priority = 0) {\n        this.priorities[item] = priority;\n\n        super.add(item);\n\n        return this.priorities;\n    }\n\n    remove (item, customFindingComparator) {\n        super.remove(item, customFindingComparator);\n\n        delete this.priorities[item];\n\n        return this.priorities;\n    }\n\n    changePriority (item, priority) {\n        this.remove(item, new Comparator(this.compareValue));\n        this.add(item, priority);\n\n        return this.priorities;\n    }\n\n    findByValue (item) {\n        return this.find(item, new Comparator(this.compareValue));\n    }\n\n    hasValue (item) {\n        return this.findByValue(item).length > 0;\n    }\n\n    compareValue (a, b) {\n        if (a === b) {\n            return 0;\n        }\n\n        return a < b ? -1 : 1;\n    }\n\n    comparePriority (a, b) {\n        if (this.priorities[a] === this.priorities[b]) {\n            return 0;\n        }\n\n        return this.priorities[a] < this.priorities[b] ? -1 : 1;\n    }\n}\n","class Promises {\n  getWorkDone () {\n    return new Promise(function (resolve, reject) {\n      resolve('Well done.');\n      reject('Not this time.');\n    });\n  }\n\n  read () {\n    return Promise(function (resolve, reject) {\n      resolve('Cause is resolving this in the \"Neauromancer\".');\n      reject('Oww, I don\\'t even remember what\\'s what.');\n    });\n  }\n\n  goSleep () {\n    return new Promise(function (resolve, reject) {\n      var req = new XMLHttpRequest();\n          req.open('GET', 'http://google.pl');\n\n      resolve(req);\n      reject('Offline.');\n    });\n  }\n\n  chaining () {\n    var fakeXhr = function () {\n      return new Promise(function (resolve, reject) {\n        var incoming = setTimeout(function () {\n          resolve('Done.');\n        }, 1000);\n\n        return incoming;\n      });\n    };\n    var transformRes = function (res) {\n      return String(res).toUpperCase();\n    };\n\n    fakeXhr().then(function (res) {\n      return transformRes(res);\n    }).then(function (res) {\n      console.log(res);\n    }, function (err) {\n      console.error(err);\n    });\n\n    var gotIt = function (res) {\n      return transformRes(res);\n    };\n\n    fakeXhr() // so beutiful :D\n      .then(gotIt)\n      .then(function (gotIt) {\n        console.log(gotIt);\n      });\n  }\n\n  chaining2 () {\n    var time = function () {\n      return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          var msg = 'Another promise.';\n          console.log(msg);\n          resolve(msg);\n        }, 2000);\n      });\n    };\n    var moreTime = function () {\n      return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          var msg = 'And another one...';\n          console.log(msg);\n          resolve(msg);\n        }, 2000);\n      });\n    };\n    time()\n      .then(moreTime);\n  }\n\n  transformRes (res) {\n    return String(res).toUpperCase();\n  };\n\n  req (done) {\n    var xhr = new XMLHttpRequest();\n        xhr.open('GET', '/');\n        xhr.onload = function () {\n          done(null, xhr.response);\n        };\n        xhr.onerror = function () {\n          done(xhr.response);\n        };\n        xhr.send();\n\n    return xhr;\n  };\n\n  race () {\n    Promise.race([\n      new Promise(function (resolve, reject) {\n        setTimeout(() => reject(new Error('Some possible timeout err.')), 1)\n      }),\n      fetch('/')\n    ])\n    .then(response => console.log(response))\n    .catch(err => console.log(err));\n  }\n\n  run () {\n    this.chaining();\n    this.chaining2();\n    this.req(function (err, data) {\n      if (err) {\n        throw err;\n        return;\n      }\n      console.log(data.length);\n    });\n    this.race();\n  }\n}\n\nexport default Promises;\n","import {LinkedList} from './linked-lists';\n\nexport default class Queues {\n    static run () {\n        const queue = new Queue();\n\n        queue.enqueue(1);\n        console.log(queue.toString());\n        queue.enqueue(3);\n        console.log(queue.toString());\n        queue.enqueue(5);\n        console.log(queue.toString());\n        queue.dequeue();\n        console.log('after dequeue', queue.toString());\n        queue.enqueue(1);\n        console.log('after enqueue', queue.toString());\n    }\n}\n\nclass Queue {\n    constructor() {\n        this.linkedList = new LinkedList();\n    }\n\n    isEmpty () {\n        return !this.linkedList.tail;\n    }\n\n    peek () {\n        if (!this.linkedList.head) {\n            return null;\n        } else {\n            return this.linkedList.head.value;\n        }\n    }\n\n    enqueue (value) {\n        this.linkedList.append(value);\n    }\n\n    dequeue () {\n        const removedHead = this.linkedList.deleteHead();\n\n        return removedHead ? removedHead.value : null;\n    }\n\n    toString(callback) {\n        return this.linkedList.toString(callback);\n    }\n}\n","class Recursions {\n  fractorial () {\n    const fractorial = n => {\n      if (n < 0) throw Error('It\\'s fractorial man...');\n      if (n === 0) return 1;\n\n      const result = n * (fractorial(n - 1));\n\n      return result;\n    };\n    console.log(fractorial(170)); // max\n  }\n\n  getMax () {\n    const sampleArr = [0,1,2,3,4,5, 10, 6,7,8,9];\n    const getMax = arr => {\n      const nums = arr.slice();\n\n      if (nums.length === 1) return nums[0];\n      if (nums[0] < nums[1]) {\n        nums.splice(0, 1);\n      } else {\n        nums.splice(1, 1);\n      }\n\n      return getMax(nums);\n    };\n    console.log(getMax(sampleArr));\n  }\n\n  swimmingCounting() {\n    const iterate = n => {\n      console.time('iterate');\n      for (let i = 1; i <= n; i++) {\n        if (i === n) {\n          console.timeEnd('iterate');\n          console.log('Break.');\n        }\n      }\n    };\n    const recurse = n => {\n      console.time('recurse');\n      if (n === 0) {\n        console.timeEnd('recurse');\n        console.log('Break.');\n      } else {\n        let nn = n - 1;\n        recurse(nn);\n      }\n      // console.log(n); // for loop :D\n    };\n    iterate(8001);\n    recurse(7379); // call stack size -(+degree)\n  }\n\n  grow () {\n    const grow = n => {\n      if (n <= 0) {\n        return 0;\n      }\n      else if (n <= 2) {\n        return 1;\n      } else {\n        return grow(n - 1) + grow(n - 2);\n      }\n    };\n    console.log(grow(8));\n  }\n\n  reverseString () {\n    const reverseString = string => {\n      if (string === \"\") {\n        return \"\";\n      } else {\n        return reverseString(string.substring(1)) + string.charAt(0);\n      }\n    };\n    console.log(reverseString('live ,evil'));\n  }\n\n  run () {\n    this.fractorial();\n    this.getMax();\n    this.swimmingCounting();\n    this.grow();\n    this.reverseString();\n  }\n}\n\nexport default Recursions;\n","import {LinkedList} from './linked-lists';\n\nexport default class Stacks {\n    static run () {\n        const stack = new Stack();\n\n        stack.push(1);\n        console.log(stack.toString());\n        stack.push(3);\n        console.log(stack.toString());\n        stack.push(5);\n        console.log(stack.toString());\n        stack.pop();\n        console.log('after pop', stack.toString());\n        stack.push(100);\n        console.log('after push', stack.toString());\n        stack.pop();\n        console.log('after pop', stack.toString());\n    }\n}\n\nclass Stack {\n    constructor() {\n        this.linkedList = new LinkedList();\n    }\n\n    isEmpty () {\n        return !this.linkedList.tail;\n    }\n\n    peek () {\n        if (this.isEmpty()) {\n            return null;\n        } else {\n            return this.linkedList.tail.value;\n        }\n    }\n\n    push (value) {\n        this.linkedList.append(value);\n    }\n\n    pop () {\n        const removedTail = this.linkedList.deleteTail();\n\n        return removedTail ? removedTail.value : null;\n    }\n\n    toString(callback) {\n        return this.linkedList.toString(callback);\n    }\n}\n","export default class Comparator {\n    constructor(compareFunction) {\n        this.compare = compareFunction || Comparator.defaultCompareFunction;\n    }\n\n    /**\n     * @param {(string|number)} a\n     * @param {(string|number)} b\n     * @returns {number}\n     */\n    static defaultCompareFunction(a, b) {\n        if (a === b) {\n            return 0;\n        }\n\n        return a < b ? -1 : 1;\n    }\n\n    equal(a, b) {\n        return this.compare(a, b) === 0;\n    }\n\n    lessThan(a, b) {\n        return this.compare(a, b) < 0;\n    }\n\n    greaterThan(a, b) {\n        return this.compare(a, b) > 0;\n    }\n\n    lessThanOrEqual(a, b) {\n        return this.lessThan(a, b) || this.equal(a, b);\n    }\n\n    greaterThanOrEqual(a, b) {\n        console.log(a, b)\n        return this.greaterThan(a, b) || this.equal(a, b);\n    }\n\n    reverse() {\n        const compareOriginal = this.compare;\n        this.compare = (a, b) => compareOriginal(b, a);\n    }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhc3NldHMvanMvc3JjL2Z1bmN0aW9uLWludm9jYXRpb25zLmpzIiwiYXNzZXRzL2pzL3NyYy9nZW5lcmF0b3JzLmpzIiwiYXNzZXRzL2pzL3NyYy9oYXNoLXRhYmxlcy5qcyIsImFzc2V0cy9qcy9zcmMvaGVhcHMuanMiLCJhc3NldHMvanMvc3JjL2hvaXN0aW5nLmpzIiwiYXNzZXRzL2pzL3NyYy9saW5rZWQtbGlzdHMuanMiLCJhc3NldHMvanMvc3JjL21haW4uanMiLCJhc3NldHMvanMvc3JjL3ByaW9yaXR5LXF1ZXVlcy5qcyIsImFzc2V0cy9qcy9zcmMvcHJvbWlzZXMuanMiLCJhc3NldHMvanMvc3JjL3F1ZXVlcy5qcyIsImFzc2V0cy9qcy9zcmMvcmVjdXJzaW9ucy5qcyIsImFzc2V0cy9qcy9zcmMvc3RhY2tzLmpzIiwiYXNzZXRzL2pzL3NyYy91dGlscy9jb21wYXJhdG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQ0FBLElBQU0sUUFBUTtBQUNaLEtBRFksR0FBQTtBQUVaLEtBRlksR0FBQTtBQUdaLEtBSFksR0FBQTtBQUlaLG1CQUFpQiwyQkFBWTtBQUMzQixXQUFPLEtBQUEsQ0FBQSxHQUFBLEdBQUEsR0FBZSxLQUFmLENBQUEsR0FBQSxHQUFBLEdBQThCLEtBQTlCLENBQUEsR0FBQSxHQUFBLEdBQTZDLEtBQXBELENBQUE7QUFDRDtBQU5XLENBQWQ7O0lBU0EsbUI7Ozs7Ozs7cUNBQ29CO0FBQ2hCLFVBQU0sZUFBZSxZQUFZO0FBQy9CLGdCQUFBLEdBQUEsQ0FBWSxLQUFaLGVBQVksRUFBWjs7QUFFQSxnQkFBQSxHQUFBLENBQVksS0FBWixDQUFBO0FBQ0EsZ0JBQUEsR0FBQSxDQUFZLEtBQVosQ0FBQTtBQUNBLGdCQUFBLEdBQUEsQ0FBWSxLQUFaLENBQUE7QUFMbUIsT0FBQSxDQUFBLElBQUEsQ0FBckIsS0FBcUIsR0FBckI7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QUFBO0FBQ0g7O0FBRUQsbUJBQU8sSUFBQSxDQUFBLEdBQVEsQ0FBUixDQUFBLEdBQVAsQ0FBQTtBQUNIOzs7Ozs7a0JBaEJVLFUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJjb25zdCBlaW5pZSA9IHtcbiAgZTogJ0UnLFxuICBtOiAnbScsXG4gIGM6ICdjJyxcbiAgZ2V0TWFzc0VxdWF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubSArICc9JyArIHRoaXMuZSArICcvJyArIHRoaXMuYyArICcqJyArIHRoaXMuYztcbiAgfVxufTtcblxuY2xhc3MgRnVuY3Rpb25JbnZvY2F0aW9ucyB7XG4gIHNpbXBsZUJpbmRGdW5jICgpIHtcbiAgICBjb25zdCBtYXNzRXF1YXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmdldE1hc3NFcXVhdGlvbigpKTtcblxuICAgICAgY29uc29sZS5sb2codGhpcy5tKTtcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuZSk7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmMpO1xuICAgIH0uYmluZChlaW5pZSkoKTtcbiAgfVxuXG4gIHNpbXBsZUNhbGxBcHBseUZ1bmMgKCkge1xuICAgIGNvbnN0IGNyZWF0ZVJlYWxFbmVyZ3lFcXVhdGlvbiA9IGZ1bmN0aW9uIChtb21lbnR1bSkge1xuICAgICAgY29uc29sZS5sb2codGhpcy5lICsgJyA9ICcgKyB0aGlzLm0gKyAnKCcgKyB0aGlzLmMgKyAnKicgKyB0aGlzLmMgKyAnKSArICgnICsgbW9tZW50dW0gKyB0aGlzLmMgKyAnKScgKyAnKCcgKyBtb21lbnR1bSArIHRoaXMuYyArICcpJyk7XG4gICAgfTtcbiAgICBjcmVhdGVSZWFsRW5lcmd5RXF1YXRpb24uY2FsbChlaW5pZSwgJ3AnKTtcbiAgICBjcmVhdGVSZWFsRW5lcmd5RXF1YXRpb24uYXBwbHkoZWluaWUsIFsncCddKTtcbiAgfVxuXG4gIGN1cnJ5aW5nICgpIHtcbiAgICBjb25zdCBtZWV0SW5zcGlyYXRpb25hbFBlcnNvbiA9IGZ1bmN0aW9uIChiaXJ0aERhdGUsIHByb2Zlc3Npb24pIHtcbiAgICAgIGNvbnN0IGhlbGxvID0gYmlydGhEYXRlIDwgMTAwMCA/ICdIaSBvbGRpZSEgJyA6ICdIaSB0aGVyZSEgJztcblxuICAgICAgc3dpdGNoIChwcm9mZXNzaW9uKSB7XG4gICAgICAgIGNhc2UgJ3BoaXNpY2lzdCc6XG4gICAgICAgICAgcmV0dXJuIGhlbGxvICsgJ0RpZCB5b3Uga25vdyB0aGF0IEUgPSBtYzIgaXMgbm90IHRoZSBmdWxsIGVxdWF0aW9uPyc7XG5cbiAgICAgICAgY2FzZSAnZW5naW5lZXInOlxuICAgICAgICAgIHJldHVybiBoZWxsbyArICdEaWQgeW91IGtub3cgdGhhdCBOaWtvbGEgVGVzbGEgdHJpY2tlZCBNb3JnYW4gdG8gYnVpbGQgaGlzIHRvd2VyIHRvIG1ha2UgaGlzIGVsZWN0cm9tYWduZXRpY2FsIGV4cGVyaW1lbnRzPyc7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gaGVsbG8gKyAnRGlkIHlvdSBrbm93IHRoYXQgTGVvbmFyZG8gZGEgVmluY2kgaGFkIG5vIGZvcm1hbCBlZHVjYXRpb24/JztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgZ3JlZXRPbGRFbmdpbmVlciA9IG1lZXRJbnNwaXJhdGlvbmFsUGVyc29uLmJpbmQobnVsbCwgNjAwKTtcbiAgICBjb25zb2xlLmxvZyhncmVldE9sZEVuZ2luZWVyKCkpO1xuICAgIGNvbnNvbGUubG9nKGdyZWV0T2xkRW5naW5lZXIoJ2VuZ2luZWVyJykpO1xuICB9XG5cbiAgY3VycnlpbmdFaW5pZSAoKSB7XG4gICAgY29uc3QgbWVldEVpbmllID0gZnVuY3Rpb24gKGJpcnRoRGF0ZSkge1xuICAgICAgY29uc3QgaGVsbG8gPSBiaXJ0aERhdGUgPCAxMDAwID8gJ0hpIG9sZGllISAnIDogJ0hpIGJvZHkhICc7XG5cbiAgICAgIHJldHVybiBoZWxsbyArICdEaWQgeW91IGtub3cgdGhhdCAnICsgdGhpcy5nZXRNYXNzRXF1YXRpb24oKSArICcgaXMgbm90IGFjdHVhbGx5IGZ1bGwgZXF1YXRpb24/JztcbiAgICB9O1xuXG4gICAgY29uc3QgZ3JlZXRFaW5pZSA9IG1lZXRFaW5pZS5iaW5kKGVpbmllKTtcbiAgICBjb25zb2xlLmxvZyhncmVldEVpbmllKDE5OTIpID09PSBtZWV0RWluaWUuY2FsbChlaW5pZSwgMTk5MikpO1xuICAgIGNvbnNvbGUubG9nKG1lZXRFaW5pZS5hcHBseShlaW5pZSwgWzE5OTJdKSk7XG4gIH1cblxuICBhcnJheUxpa2VPYmplY3RzICgpIHtcbiAgICBjb25zdCBlbmVyZ3lUeXBlcyA9IHtcbiAgICAgIDA6ICdQb3RlbnRpYWwnLFxuICAgICAgMTogJ0tpbmV0aWMnLFxuICAgICAgMjogJ0dyYXZpdGlvbmFsJyxcbiAgICAgIDM6ICdDaGVtaWNhbCcsXG4gICAgICA0OiAnTnVjbGVhcicsXG4gICAgICA1OiAnRWxhc3RpYycsXG4gICAgICA2OiAnTW90aW9uJyxcbiAgICAgIDc6ICdUaGVybWFsJyxcbiAgICAgIGxlbmd0aDogOFxuICAgIH07XG5cbiAgICBjb25zb2xlLmxvZyhBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlbmVyZ3lUeXBlcywgMCkpO1xuICAgIGNvbnNvbGUubG9nKEFycmF5LnByb3RvdHlwZS5yZXZlcnNlLmNhbGwoZW5lcmd5VHlwZXMsIDApKTtcblxuICAgIC8vIHVzaW5nIGFyZ3VtZXRzXG4gICAgY29uc3QgbGlzdE1lV2l0aENvbW1hcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgICBsZXQgZmlsdGVyZWQgPSBhcmdzLmZpbHRlcihhID0+IHtcbiAgICAgICAgY29uc3Qgam9pbmVkID0gYS5qb2luKCcsICcpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGpvaW5lZCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGxpc3RNZVdpdGhDb21tYXMoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZW5lcmd5VHlwZXMsIDApKTtcbiAgfVxuXG4gIHZhcmlhZGljRnVuY3MgKCkge1xuICAgIGNvbnN0IHBpID0gWzMsIDEsIDQsIDEsIDUsIDldO1xuICAgIGNvbnN0IHBlb3BsZSA9IFtcbiAgICAgICdBbGJlcnQgRWluc3RlaW4nLFxuICAgICAgJ05pa29sYSBUZXNsYScsXG4gICAgICAnTGVvbmFkcm8gZGEgVmluY2knXG4gICAgXTtcbiAgICBjb25zdCBtZWV0VGhlbUFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgY29uc3QgbGFzdCA9IGFyZ3MucG9wKCk7XG5cbiAgICAgIHJldHVybiAnTWVldCAnICsgYXJncy5qb2luKCcsICcpICsgJywgYW5kICcgKyBsYXN0ICsgJy4nO1xuICAgIH07XG5cbiAgICBjb25zb2xlLmxvZyhNYXRoLm1heC5hcHBseShudWxsLCBwaSkpO1xuICAgIGNvbnNvbGUubG9nKG1lZXRUaGVtQWxsLmFwcGx5KG51bGwsIHBlb3BsZSkpO1xuICB9XG5cbiAgcnVuICgpIHtcbiAgICB0aGlzLnNpbXBsZUJpbmRGdW5jKCk7XG4gICAgdGhpcy5zaW1wbGVDYWxsQXBwbHlGdW5jKCk7XG4gICAgdGhpcy5jdXJyeWluZygpO1xuICAgIHRoaXMuY3VycnlpbmdFaW5pZSgpO1xuICAgIHRoaXMuYXJyYXlMaWtlT2JqZWN0cygpO1xuICAgIHRoaXMudmFyaWFkaWNGdW5jcygpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZ1bmN0aW9uSW52b2NhdGlvbnM7XG4iLCJjbGFzcyBHZW5lcmF0b3JzIHtcbiAgc2ltcGxlR2VuZXJhdG9yICgpIHtcbiAgICBmdW5jdGlvbiAqZ2VuICgpIHtcbiAgICAgIHlpZWxkIDE7XG4gICAgICB5aWVsZCAyO1xuXG4gICAgICByZXR1cm4gMztcbiAgICB9XG4gICAgbGV0IGl0ID0gZ2VuKCk7XG4gICAgY29uc29sZS5sb2coJ3NpbXBsZUdlbmVyYXRvcicsIGl0Lm5leHQoKSk7XG4gICAgY29uc29sZS5sb2coJ3NpbXBsZUdlbmVyYXRvcicsIGl0Lm5leHQoKSk7XG4gICAgY29uc29sZS5sb2coJ3NpbXBsZUdlbmVyYXRvcicsIGl0Lm5leHQoKSk7IC8vIGRvbmU6IHRydWUgd2l0aCBubyB2YWx1ZVxuICB9XG5cbiAgcGxheWluZ1dpdGhHZW5lcmF0b3IgKCkge1xuICAgIGZ1bmN0aW9uICpnZW4gKHgpIHtcbiAgICAgIGNvbnNvbGUubG9nKCd4JywgeCk7IC8vID0+IDUgaW4gMXN0IGl0ZXJhdGlvblxuICAgICAgbGV0IHkgPSAyICogKHlpZWxkICh4ICsgMSkpO1xuICAgICAgY29uc29sZS5sb2coJ3knLCB5KTtcbiAgICAgIGxldCB6ID0geWllbGQgeSAvIDM7IC8vID0+IDEyIGluIDJuZCBpdGVyYXRpb25cbiAgICAgIGNvbnNvbGUubG9nKHopO1xuICAgICAgcmV0dXJuIHggKyB5ICsgejtcbiAgICB9XG5cbiAgICBsZXQgaXQgPSBnZW4oNCk7XG4gICAgY29uc29sZS5sb2coJ3BsYXlpbmdXaXRoR2VuZXJhdG9yJywgaXQubmV4dCgpLnZhbHVlKTtcbiAgICBjb25zb2xlLmxvZygncGxheWluZ1dpdGhHZW5lcmF0b3InLCBpdC5uZXh0KDYpLnZhbHVlKTtcbiAgICBjb25zb2xlLmxvZygncGxheWluZ1dpdGhHZW5lcmF0b3InLCBpdC5uZXh0KDIpLnZhbHVlKTtcbiAgfVxuXG4gIGFzeW5jICgpIHtcbiAgICBjb25zdCBmZXRjaCA9ICgpID0+IG5ldyBQcm9taXNlICgocmVzb2x2ZSkgPT4ge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKDEwMCksIDIwMDApO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcHJvbWlzZUZ1bmMgPSAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgZmV0Y2goKS50aGVuKHJlcyA9PiB7XG4gICAgICAgIHJlc29sdmUocmVzICsgMSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHByb21pc2VGdW5jKCkudGhlbihyZXMgPT4gY29uc29sZS5sb2cocmVzKSk7XG4gIH1cblxuICBhc3luY0F3YWl0ICgpIHtcbiAgICBjb25zdCBmZXRjaCA9ICgpID0+IG5ldyBQcm9taXNlICgocmVzb2x2ZSkgPT4ge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCdUaGUgcmVhc29uIEkgZG8gaXQgaXMgJyksIDEwMDApO1xuICAgIH0pO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gYXN5bmNGdW5jICgpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZldGNoKCk7XG5cbiAgICAgIHJldHVybiByZXN1bHQgKyAndG8ga2VlcCBsZWFybmluZy4nO1xuICAgIH1cblxuICAgIGFzeW5jRnVuYygpLnRoZW4ocmVzdWx0ID0+IGNvbnNvbGUubG9nKHJlc3VsdCkpO1xuICB9XG5cbiAgYnJpZGdlT2ZEZWF0aCAoKSB7XG4gICAgZnVuY3Rpb24gKmJyaWRnZVJpZGRsZSAoKSB7XG4gICAgICBjb25zdCByaWRkbGUgPSB5aWVsZCAnV2hhdCBpcyBpdCB0aGF0IGJlbG9uZ3MgdG8geW91IGJ1dCBvdGhlcnMgdXNlIGl0IG1vcmUgdGhhbiB5b3U/JztcbiAgICAgIGNvbnNvbGUubG9nKHJpZGRsZSk7XG5cbiAgICAgIGlmIChyaWRkbGUgIT09ICdNeSBuYW1lJykgcmV0dXJuICdZb3Ugc2hhbGwgbm90IHBhc3MhJztcblxuICAgICAgcmV0dXJuICdZb3Ugc2hhbGwgcGFzcy4nO1xuICAgIH1cblxuICAgIGNvbnN0IGJyaWRnZSA9IGJyaWRnZVJpZGRsZSgpO1xuICAgIGNvbnN0IHEgPSBicmlkZ2UubmV4dCgpLnZhbHVlO1xuICAgIGNvbnNvbGUubG9nKHEpO1xuICAgIGNvbnN0IGEgPSBicmlkZ2UubmV4dChwcm9tcHQoKSkudmFsdWU7XG4gICAgY29uc29sZS5sb2coYSk7XG4gIH1cblxuICBydW4gKCkge1xuICAgIC8vIHRoaXMuc2ltcGxlR2VuZXJhdG9yKCk7XG4gICAgLy8gdGhpcy5wbGF5aW5nV2l0aEdlbmVyYXRvcigpO1xuICAgIC8vIHRoaXMuYXN5bmMoKTtcbiAgICB0aGlzLmFzeW5jQXdhaXQoKTtcbiAgICB0aGlzLmJyaWRnZU9mRGVhdGgoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHZW5lcmF0b3JzO1xuIiwiaW1wb3J0IHtMaW5rZWRMaXN0fSBmcm9tICcuL2xpbmtlZC1saXN0cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhhc2hUYWJsZXMge1xuICAgIHN0YXRpYyBydW4gKCkge1xuICAgICAgICBjb25zdCBoYXNoVGFibGUgPSBuZXcgSGFzaFRhYmxlKCk7XG5cbiAgICAgICAgaGFzaFRhYmxlLnNldCgnSm9obm55IEZpdmUnLCB7XG4gICAgICAgICAgICBpcTogMjIwXG4gICAgICAgIH0pO1xuICAgICAgICBoYXNoVGFibGUuc2V0KCdEciBCcm93bicsIHtcbiAgICAgICAgICAgIGlxOiAyMjFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gMzY7IGkrKykge1xuICAgICAgICAgICAgaGFzaFRhYmxlLnNldCgnSW5kZXgnICsgaSwge1xuICAgICAgICAgICAgICAgIGlkOiBpICogaVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZyhoYXNoVGFibGUpO1xuICAgICAgICBjb25zb2xlLmxvZyhoYXNoVGFibGUuZ2V0KCdJbmRleDUnKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGhhc2hUYWJsZS5yZW1vdmUoJ0luZGV4NScpKTtcbiAgICAgICAgY29uc29sZS5sb2coaGFzaFRhYmxlLmdldCgnSW5kZXg1JykpO1xuICAgICAgICBjb25zb2xlLmxvZyhoYXNoVGFibGUua2V5cyk7XG4gICAgfVxufVxuXG5jbGFzcyBIYXNoVGFibGUge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5idWNrZXRzID0ge307XG5cbiAgICAgICAgdGhpcy5rZXlzID0ge307XG4gICAgfVxuXG4gICAgY29udmVydFRvSGFzaCAoa2V5KSB7XG4gICAgICAgIHZhciBoYXNoID0gNTM4MTtcbiAgICAgICAgdmFyIGkgPSBrZXkubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpKSB7XG4gICAgICAgICAgICBoYXNoID0gKGhhc2ggKiAzMykgXiBrZXkuY2hhckNvZGVBdCgtLWkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhhc2ggPj4+IDA7XG4gICAgfVxuXG4gICAgc2V0IChrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGhhc2hLZXkgPSB0aGlzLmNvbnZlcnRUb0hhc2goa2V5KTtcbiAgICAgICAgdGhpcy5rZXlzW2tleV0gPSBoYXNoS2V5O1xuXG4gICAgICAgIGlmICghdGhpcy5idWNrZXRzW2hhc2hLZXldKSB7XG4gICAgICAgICAgICB0aGlzLmJ1Y2tldHNbaGFzaEtleV0gPSBuZXcgTGlua2VkTGlzdCgpO1xuICAgICAgICAgICAgdGhpcy5idWNrZXRzW2hhc2hLZXldLmFwcGVuZCh7a2V5LCB2YWx1ZX0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idWNrZXRzW2hhc2hLZXldID0gbmV3IExpbmtlZExpc3QoKTtcbiAgICAgICAgICAgIHRoaXMuYnVja2V0c1toYXNoS2V5XS52YWx1ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IChrZXkpIHtcbiAgICAgICAgY29uc3QgYnVja2V0TGlua2VkTGlzdCA9IHRoaXMuYnVja2V0c1t0aGlzLmNvbnZlcnRUb0hhc2goa2V5KV07XG4gICAgICAgIGNvbnN0IG5vZGUgPSBidWNrZXRMaW5rZWRMaXN0ID8gYnVja2V0TGlua2VkTGlzdC5maW5kKG51bGwsIChub2RlVmFsdWUpID0+IG5vZGVWYWx1ZS5rZXkgPT09IGtleSkgOiBudWxsO1xuXG4gICAgICAgIHJldHVybiBub2RlID8gbm9kZS52YWx1ZS52YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZW1vdmUgKGtleSkge1xuICAgICAgICBjb25zdCBoYXNoS2V5ID0gdGhpcy5jb252ZXJ0VG9IYXNoKGtleSk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmtleXNba2V5XTtcblxuICAgICAgICBjb25zdCBidWNrZXRMaW5rZWRMaXN0ID0gdGhpcy5idWNrZXRzW2hhc2hLZXldO1xuICAgICAgICBjb25zdCBub2RlID0gYnVja2V0TGlua2VkTGlzdC5maW5kKG51bGwsIChub2RlVmFsdWUpID0+IG5vZGVWYWx1ZS5rZXkgPT09IGtleSk7XG5cbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBidWNrZXRMaW5rZWRMaXN0LnJlbW92ZShub2RlLnZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGhhcyAoa2V5KSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmtleXMsIGtleSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IENvbXBhcmF0b3IgZnJvbSBcIi4vdXRpbHMvY29tcGFyYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZWFwcyB7XG4gICAgc3RhdGljIHJ1biAoKSB7XG4gICAgICAgIGNvbnN0IGhlYXBNaW4gPSBuZXcgSGVhcE1pbigpO1xuICAgICAgICAgICAgICBoZWFwTWluLmFkZCg5KTtcbiAgICAgICAgICAgICAgaGVhcE1pbi5hZGQoMSk7XG4gICAgICAgICAgICAgIGhlYXBNaW4uYWRkKDApO1xuICAgICAgICAgICAgICBoZWFwTWluLmFkZCgxMDApO1xuICAgICAgICAgICAgICBoZWFwTWluLnJlbW92ZSgwKTtcbiAgICAgICAgICAgICAgaGVhcE1pbi5hZGQoMjcpO1xuXG4gICAgICAgIGNvbnN0IGhlYXBNYXggPSBuZXcgSGVhcE1heCgpO1xuICAgICAgICAgICAgICBoZWFwTWF4LmFkZCg5KTtcbiAgICAgICAgICAgICAgaGVhcE1heC5hZGQoMCk7XG4gICAgICAgICAgICAgIGhlYXBNYXguYWRkKDI3KTtcbiAgICAgICAgICAgICAgaGVhcE1heC5hZGQoMjUpO1xuICAgICAgICAgICAgICBoZWFwTWF4LnJlbW92ZSgyNyk7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ2hlYXBNaW5cXG4nLCBoZWFwTWluLCAnXFxuXFxuJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdoZWFwTWF4XFxuJywgaGVhcE1heCwgJ1xcblxcbicpO1xuICAgIH1cbn1cblxuY2xhc3MgSGVhcCB7XG4gICAgY29uc3RydWN0b3IgKGNvbXBhcmF0b3JGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmNvbXBhcmUgPSBuZXcgQ29tcGFyYXRvcihjb21wYXJhdG9yRnVuY3Rpb24pO1xuXG4gICAgICAgIHRoaXMuaGVhcENvbnRhaW5lciA9IFtdO1xuICAgIH1cblxuICAgIGFkZCAoaXRlbSkge1xuICAgICAgICB0aGlzLmhlYXBDb250YWluZXIucHVzaChpdGVtKTtcbiAgICAgICAgdGhpcy5oZWFwaWZ5VXAoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5oZWFwQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJlbW92ZSAoaXRlbSwgY29tcGFyYXRvciA9IHRoaXMuY29tcGFyZSkge1xuICAgICAgICBjb25zdCBudW1iZXJPZkl0ZW1zVG9SZW1vdmUgPSB0aGlzLmZpbmQoaXRlbSwgY29tcGFyYXRvcikubGVuZ3RoO1xuXG4gICAgICAgIGZvciAobGV0IGl0ZXJhdGlvbiA9IDA7IGl0ZXJhdGlvbiA8IG51bWJlck9mSXRlbXNUb1JlbW92ZTsgaXRlcmF0aW9uICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4VG9SZW1vdmUgPSB0aGlzLmZpbmQoaXRlbSwgY29tcGFyYXRvcikucG9wKCk7XG5cbiAgICAgICAgICAgIGlmIChpbmRleFRvUmVtb3ZlID09PSAodGhpcy5oZWFwQ29udGFpbmVyLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWFwQ29udGFpbmVyLnBvcCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYXBDb250YWluZXJbaW5kZXhUb1JlbW92ZV0gPSB0aGlzLmhlYXBDb250YWluZXIucG9wKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRJdGVtID0gdGhpcy5nZXRQYXJlbnQoaW5kZXhUb1JlbW92ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFzTGVmdENoaWxkKGluZGV4VG9SZW1vdmUpICYmXG4gICAgICAgICAgICAgICAgICAgICghcGFyZW50SXRlbSB8fCB0aGlzLnBhaXJJc0luQ29ycmVjdE9yZGVyKHBhcmVudEl0ZW0sIHRoaXMuaGVhcENvbnRhaW5lcltpbmRleFRvUmVtb3ZlXSkpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGVhcGlmeURvd24oaW5kZXhUb1JlbW92ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWFwaWZ5VXAoaW5kZXhUb1JlbW92ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaGVhcENvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBmaW5kIChpdGVtLCBjb21wYXJhdG9yID0gdGhpcy5jb21wYXJlKSB7XG4gICAgICAgIGNvbnN0IGZvdW5kSXRlbUluZGljZXMgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpdGVtSW5kZXggPSAwOyBpdGVtSW5kZXggPCB0aGlzLmhlYXBDb250YWluZXIubGVuZ3RoOyBpdGVtSW5kZXggKz0gMSkge1xuICAgICAgICAgICAgaWYgKGNvbXBhcmF0b3IuZXF1YWwoaXRlbSwgdGhpcy5oZWFwQ29udGFpbmVyW2l0ZW1JbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgZm91bmRJdGVtSW5kaWNlcy5wdXNoKGl0ZW1JbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm91bmRJdGVtSW5kaWNlcztcbiAgICB9XG5cbiAgICBoZWFwaWZ5VXAgKGN1c3RvbVN0YXJ0SW5kZXgpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRJbmRleCA9IGN1c3RvbVN0YXJ0SW5kZXggfHwgdGhpcy5oZWFwQ29udGFpbmVyLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgY29uc29sZS5sb2codGhpcy5nZXRQYXJlbnQoY3VycmVudEluZGV4KSwgdGhpcy5oZWFwQ29udGFpbmVyW2N1cnJlbnRJbmRleF0sIHRoaXMucGFpcklzSW5Db3JyZWN0T3JkZXIodGhpcy5nZXRQYXJlbnQoY3VycmVudEluZGV4KSwgdGhpcy5oZWFwQ29udGFpbmVyW2N1cnJlbnRJbmRleF0pKTtcblxuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgICB0aGlzLmhhc1BhcmVudChjdXJyZW50SW5kZXgpICYmXG4gICAgICAgICAgICAhdGhpcy5wYWlySXNJbkNvcnJlY3RPcmRlcih0aGlzLmdldFBhcmVudChjdXJyZW50SW5kZXgpLCB0aGlzLmhlYXBDb250YWluZXJbY3VycmVudEluZGV4XSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnN3YXAoY3VycmVudEluZGV4LCB0aGlzLmdldFBhcmVudEluZGV4KGN1cnJlbnRJbmRleCkpO1xuICAgICAgICAgICAgY3VycmVudEluZGV4ID0gdGhpcy5nZXRQYXJlbnRJbmRleChjdXJyZW50SW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGVhcGlmeURvd24gKGN1c3RvbVN0YXJ0SW5kZXggPSAwKSB7XG4gICAgICAgIGxldCBjdXJyZW50SW5kZXggPSBjdXN0b21TdGFydEluZGV4O1xuICAgICAgICBsZXQgbmV4dEluZGV4ID0gbnVsbDtcblxuICAgICAgICB3aGlsZSAodGhpcy5oYXNMZWZ0Q2hpbGQoY3VycmVudEluZGV4KSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHRoaXMuaGFzUmlnaHRDaGlsZChjdXJyZW50SW5kZXgpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5wYWlySXNJbkNvcnJlY3RPcmRlcih0aGlzLmdldFJpZ2h0Q2hpbGQoY3VycmVudEluZGV4KSwgdGhpcy5nZXRMZWZ0Q2hpbGQoY3VycmVudEluZGV4KSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IHRoaXMuZ2V0UmlnaHRDaGlsZEluZGV4KGN1cnJlbnRJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IHRoaXMuZ2V0TGVmdENoaWxkSW5kZXgoY3VycmVudEluZGV4KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMucGFpcklzSW5Db3JyZWN0T3JkZXIodGhpcy5oZWFwQ29udGFpbmVyW2N1cnJlbnRJbmRleF0sIHRoaXMuaGVhcENvbnRhaW5lcltuZXh0SW5kZXhdKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnN3YXAoY3VycmVudEluZGV4LCBuZXh0SW5kZXgpO1xuICAgICAgICAgICAgY3VycmVudEluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3dhcCAoaW5kZXhPbmUsIGluZGV4VHdvKSB7XG4gICAgICAgIGNvbnN0IHRtcFNlY29uZCA9IHRoaXMuaGVhcENvbnRhaW5lcltpbmRleFR3b107XG5cbiAgICAgICAgdGhpcy5oZWFwQ29udGFpbmVyW2luZGV4VHdvXSA9IHRoaXMuaGVhcENvbnRhaW5lcltpbmRleE9uZV07XG4gICAgICAgIHRoaXMuaGVhcENvbnRhaW5lcltpbmRleE9uZV0gPSB0bXBTZWNvbmQ7XG4gICAgfVxuXG4gICAgaGFzUGFyZW50IChjaGlsZEluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmVudEluZGV4KGNoaWxkSW5kZXgpID49IDA7XG4gICAgfVxuXG4gICAgaGFzTGVmdENoaWxkIChwYXJlbnRJbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMZWZ0Q2hpbGRJbmRleChwYXJlbnRJbmRleCkgPCB0aGlzLmhlYXBDb250YWluZXIubGVuZ3RoO1xuICAgIH1cblxuICAgIGhhc1JpZ2h0Q2hpbGQgKHBhcmVudEluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJpZ2h0Q2hpbGRJbmRleChwYXJlbnRJbmRleCkgPCB0aGlzLmhlYXBDb250YWluZXIubGVuZ3RoO1xuICAgIH1cblxuICAgIGdldFBhcmVudEluZGV4IChjaGlsZEluZGV4KSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKChjaGlsZEluZGV4IC0gMSkgLyAyKTtcbiAgICB9XG5cbiAgICBnZXRMZWZ0Q2hpbGRJbmRleCAocGFyZW50SW5kZXgpIHtcbiAgICAgICAgcmV0dXJuICgyICogcGFyZW50SW5kZXgpICsgMTtcbiAgICB9XG5cbiAgICBnZXRSaWdodENoaWxkSW5kZXggKHBhcmVudEluZGV4KSB7XG4gICAgICAgIHJldHVybiAoMiAqIHBhcmVudEluZGV4KSArIDI7XG4gICAgfVxuXG4gICAgZ2V0UGFyZW50IChjaGlsZEluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhlYXBDb250YWluZXJbdGhpcy5nZXRQYXJlbnRJbmRleChjaGlsZEluZGV4KV07XG4gICAgfVxuXG4gICAgZ2V0TGVmdENoaWxkIChwYXJlbnRJbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oZWFwQ29udGFpbmVyW3RoaXMuZ2V0TGVmdENoaWxkSW5kZXgocGFyZW50SW5kZXgpXTtcbiAgICB9XG5cbiAgICBnZXRSaWdodENoaWxkIChwYXJlbnRJbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oZWFwQ29udGFpbmVyW3RoaXMuZ2V0UmlnaHRDaGlsZEluZGV4KHBhcmVudEluZGV4KV07XG4gICAgfVxuXG4gICAgcGFpcklzSW5Db3JyZWN0T3JkZXIgKGZpcnN0SXRlbSwgc2Vjb25kSXRlbSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ltcGxlbWVudCBjb21wYXJpc29uIG1ldGhvZCBpbiBIZWFwTWF4L0hlYXBNaW4gY2xhc3Nlcy4nKVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEhlYXBNaW4gZXh0ZW5kcyBIZWFwIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcGFpcklzSW5Db3JyZWN0T3JkZXIgKGZpcnN0SXRlbSwgc2Vjb25kSXRlbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlLmxlc3NUaGFuT3JFcXVhbChmaXJzdEl0ZW0sIHNlY29uZEl0ZW0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEhlYXBNYXggZXh0ZW5kcyBIZWFwIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcGFpcklzSW5Db3JyZWN0T3JkZXIgKGZpcnN0SXRlbSwgc2Vjb25kSXRlbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlLmdyZWF0ZXJUaGFuT3JFcXVhbChmaXJzdEl0ZW0sIHNlY29uZEl0ZW0pO1xuICAgIH1cbn0iLCJjbGFzcyBIb2lzdGluZyB7XG4gIGxvZ3MgKCkge1xuICAgIGNvbnNvbGUubG9nKHR5cGVvZiBub25leGlzdGluZyk7IC8vIHVuZGVmaW5lZFxuICAgIC8vIGNvbnNvbGUubG9nKG5vbmV4aXN0aW5nKTsgLy8gcmVmZXJlbmNlRXJyb3Igbm90IGRlZmluZWRcbiAgfVxuXG4gIGhvaXN0ICgpIHtcbiAgICBmdW5jdGlvbiBzY29wZWQoKSB7XG4gICAgICAvLyBhID0gMDtcbiAgICAgIHZhciBiID0gMTAwO1xuICAgICAgY29uc29sZS5sb2coJ1NvbWUgY29kZS4uLicpO1xuXG4gICAgICAvLyBJdCBjb252ZXJ0cyBpbnRvXG4gICAgICAvLyB2YXIgYjtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdTb21lIGNvZGUuLi4nKTtcbiAgICAgIC8vIGIgPSAxMDA7XG4gICAgfVxuXG4gICAgc2NvcGVkKCk7XG4gICAgLy8gY29uc29sZS5sb2coYSk7IC8vIHJlZkVyclxuICAgIC8vIGNvbnNvbGUubG9nKGIpO1xuICB9XG5cbiAgZXNuZXh0ICgpIHtcbiAgICBjb25zdCBpbnRvdWNoYWJsZSA9IDA7XG5cbiAgICBjb25zb2xlLmxvZyhpbnRvdWNoYWJsZSk7XG4gICAgLy8gaW50b3VjaGFibGUgID0gMTsgLy8gZXJyXG4gIH1cblxuICBydW4gKCkge1xuICAgIHRoaXMubG9ncygpO1xuICAgIHRoaXMuaG9pc3QoKTtcbiAgICB0aGlzLmVzbmV4dCgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhvaXN0aW5nO1xuIiwiaW1wb3J0IENvbXBhcmF0b3IgZnJvbSBcIi4vdXRpbHMvY29tcGFyYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaW5rZWRMaXN0cyB7XG4gICAgc3RhdGljIHJ1biAoKSB7XG4gICAgICAgIGNvbnN0IGxpbmtlZExpc3QgPSBuZXcgTGlua2VkTGlzdCgpO1xuXG4gICAgICAgIGxpbmtlZExpc3QuYXBwZW5kKDEwMCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGxpbmtlZExpc3QudG9TdHJpbmcoKSk7XG4gICAgICAgIGxpbmtlZExpc3QucHJlcGVuZCgwLjUpO1xuICAgICAgICBjb25zb2xlLmxvZyhsaW5rZWRMaXN0LnRvU3RyaW5nKCkpO1xuICAgICAgICBsaW5rZWRMaXN0LmFwcGVuZCg1KTtcbiAgICAgICAgY29uc29sZS5sb2cobGlua2VkTGlzdC50b1N0cmluZygpKTtcbiAgICAgICAgbGlua2VkTGlzdC5wcmVwZW5kKDAuMSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGxpbmtlZExpc3QudG9TdHJpbmcoKSk7XG4gICAgICAgIGxpbmtlZExpc3QucmVtb3ZlKDUpO1xuICAgICAgICBjb25zb2xlLmxvZyhsaW5rZWRMaXN0LnRvU3RyaW5nKCkpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGxpbmtlZExpc3QpO1xuICAgICAgICBjb25zb2xlLmxvZyhsaW5rZWRMaXN0LmZpbmQoMC41KSk7XG5cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMaW5rZWRMaXN0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICAgICAgdGhpcy50YWlsID0gbnVsbDtcblxuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgdGhpcy5jb21wYXJlID0gbmV3IENvbXBhcmF0b3IoKTtcbiAgICB9XG5cbiAgICBwcmVwZW5kICh2YWwpIHtcbiAgICAgICAgY29uc3QgbmV3Tm9kZSA9IG5ldyBMaW5rZWRMaXN0Tm9kZSh2YWwsIHRoaXMuaGVhZCk7XG5cbiAgICAgICAgdGhpcy5oZWFkID0gbmV3Tm9kZTtcblxuICAgICAgICBpZiAoIXRoaXMudGFpbCkge1xuICAgICAgICAgICAgdGhpcy50YWlsID0gbmV3Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGVuZ3RoKys7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYXBwZW5kICh2YWwpIHtcbiAgICAgICAgY29uc3QgbmV3Tm9kZSA9IG5ldyBMaW5rZWRMaXN0Tm9kZSh2YWwpO1xuXG4gICAgICAgIGlmICghdGhpcy5oZWFkKSB7XG4gICAgICAgICAgICB0aGlzLmhlYWQgPSBuZXdOb2RlO1xuICAgICAgICAgICAgdGhpcy50YWlsID0gbmV3Tm9kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGFpbC5uZXh0ID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIHRoaXMudGFpbCA9IG5ld05vZGU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJlbW92ZSAodmFsKSB7XG4gICAgICAgIGlmICghdGhpcy5oZWFkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkZWxldGVkTm9kZSA9IG51bGw7XG5cbiAgICAgICAgd2hpbGUgKHRoaXMuaGVhZCAmJiB0aGlzLmNvbXBhcmUuZXF1YWwodGhpcy5oZWFkLnZhbHVlLCB2YWwpKSB7XG4gICAgICAgICAgICBkZWxldGVkTm9kZSA9IHRoaXMuaGVhZDtcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGN1cnJlbnROb2RlID0gdGhpcy5oZWFkO1xuXG4gICAgICAgIGlmIChjdXJyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnROb2RlLm5leHQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb21wYXJlLmVxdWFsKGN1cnJlbnROb2RlLm5leHQudmFsdWUsIHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlZE5vZGUgPSBjdXJyZW50Tm9kZS5uZXh0O1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS5uZXh0ID0gY3VycmVudE5vZGUubmV4dC5uZXh0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUubmV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jb21wYXJlLmVxdWFsKHRoaXMudGFpbC52YWx1ZSwgdmFsKSkge1xuICAgICAgICAgICAgdGhpcy50YWlsID0gY3VycmVudE5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVsZXRlZE5vZGU7XG4gICAgfVxuXG4gICAgZmluZCAodmFsID0gbnVsbCwgY2FsbGJhY2sgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhlYWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGN1cnJlbnROb2RlID0gdGhpcy5oZWFkO1xuXG4gICAgICAgIHdoaWxlIChjdXJyZW50Tm9kZSkge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIGNhbGxiYWNrKGN1cnJlbnROb2RlLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZhbCAhPT0gbnVsbCAmJiB0aGlzLmNvbXBhcmUuZXF1YWwoY3VycmVudE5vZGUudmFsdWUsIHZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudE5vZGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUubmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGRlbGV0ZUhlYWQgKCkge1xuICAgICAgICBpZiAoIXRoaXMuaGVhZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWxldGVkSGVhZCA9IHRoaXMuaGVhZDtcblxuICAgICAgICBpZiAodGhpcy5oZWFkLm5leHQpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVsZXRlZEhlYWQ7XG4gICAgfVxuXG4gICAgZGVsZXRlVGFpbCAoKSB7XG4gICAgICAgIGNvbnN0IGRlbGV0ZWRUYWlsID0gdGhpcy50YWlsO1xuXG4gICAgICAgIGlmICh0aGlzLmhlYWQgPT09IHRoaXMudGFpbCkge1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudGFpbCA9IG51bGw7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWxldGVkVGFpbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjdXJyZW50Tm9kZSA9IHRoaXMuaGVhZDtcblxuICAgICAgICB3aGlsZSAoY3VycmVudE5vZGUubmV4dCkge1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50Tm9kZS5uZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS5uZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50YWlsID0gY3VycmVudE5vZGU7XG5cbiAgICAgICAgcmV0dXJuIGRlbGV0ZWRUYWlsO1xuICAgIH1cblxuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gW107XG5cbiAgICAgICAgbGV0IGN1cnJlbnROb2RlID0gdGhpcy5oZWFkO1xuXG4gICAgICAgIHdoaWxlIChjdXJyZW50Tm9kZSkge1xuICAgICAgICAgICAgbm9kZXMucHVzaChjdXJyZW50Tm9kZSk7XG4gICAgICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLm5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9BcnJheSgpLm1hcCgobm9kZSkgPT4gbm9kZS50b1N0cmluZyhjYWxsYmFjaykpLnRvU3RyaW5nKCk7XG4gICAgfVxufVxuXG5jbGFzcyBMaW5rZWRMaXN0Tm9kZSB7XG4gICAgY29uc3RydWN0b3IgKHZhbHVlLCBuZXh0ID0gbnVsbCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMubmV4dCA9IG5leHQ7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrID8gY2FsbGJhY2sodGhpcy52YWx1ZSkgOiBgJHt0aGlzLnZhbHVlfWA7XG4gICAgfVxufVxuIiwiaW1wb3J0IEhvaXN0aW5nIGZyb20gJy4vaG9pc3RpbmcuanMnO1xuaW1wb3J0IFByb21pc2VzIGZyb20gJy4vcHJvbWlzZXMuanMnO1xuaW1wb3J0IEdlbmVyYXRvcnMgZnJvbSAnLi9nZW5lcmF0b3JzLmpzJztcbmltcG9ydCBGdW5jdGlvbkludm9jYXRpb25zIGZyb20gJy4vZnVuY3Rpb24taW52b2NhdGlvbnMuanMnO1xuaW1wb3J0IFJlY3Vyc2lvbnMgZnJvbSAnLi9yZWN1cnNpb25zLmpzJztcbmltcG9ydCBMaW5rZWRMaXN0cyBmcm9tICcuL2xpbmtlZC1saXN0cy5qcyc7XG5pbXBvcnQgUXVldWVzIGZyb20gXCIuL3F1ZXVlc1wiO1xuaW1wb3J0IFN0YWNrcyBmcm9tIFwiLi9zdGFja3NcIjtcbmltcG9ydCBIYXNoVGFibGVzIGZyb20gXCIuL2hhc2gtdGFibGVzXCI7XG5pbXBvcnQgSGVhcHMgZnJvbSBcIi4vaGVhcHNcIjtcbmltcG9ydCBQcmlvcml0eVF1ZXVlcyBmcm9tIFwiLi9wcmlvcml0eS1xdWV1ZXNcIjtcblxuY2xhc3MgTWFpbiB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmhvaXN0aW5nID0gbmV3IEhvaXN0aW5nKCk7XG4gICAgdGhpcy5wcm9taXNlcyA9IG5ldyBQcm9taXNlcygpO1xuICAgIHRoaXMuZ2VuZXJhdG9ycyA9IG5ldyBHZW5lcmF0b3JzKCk7XG4gICAgdGhpcy5mdW5jdGlvbkludm9jYXRpb25zID0gbmV3IEZ1bmN0aW9uSW52b2NhdGlvbnMoKTtcbiAgICB0aGlzLnJlY3Vyc2lvbnMgPSBuZXcgUmVjdXJzaW9ucygpO1xuICB9XG5cbiAgc3RhdGljIHJ1biAoKSB7XG4gICAgLy8gdGhpcy5ob2lzdGluZy5ydW4oKTtcbiAgICAvLyB0aGlzLnByb21pc2VzLnJ1bigpO1xuICAgIC8vIHRoaXMuZ2VuZXJhdG9ycy5ydW4oKTtcbiAgICAvLyB0aGlzLmZ1bmN0aW9uSW52b2NhdGlvbnMucnVuKCk7XG4gICAgLy8gdGhpcy5yZWN1cnNpb25zLnJ1bigpO1xuXG4gICAgLy8gTGlua2VkTGlzdHMucnVuKCk7XG4gICAgLy8gUXVldWVzLnJ1bigpO1xuICAgIC8vIFN0YWNrcy5ydW4oKTtcbiAgICAvLyBIYXNoVGFibGVzLnJ1bigpO1xuICAgIC8vIEhlYXBzLnJ1bigpO1xuICAgIFByaW9yaXR5UXVldWVzLnJ1bigpO1xuICB9XG59XG5cbk1haW4ucnVuKCk7XG4iLCJpbXBvcnQge0hlYXBNaW59IGZyb20gJy4vaGVhcHMnO1xuaW1wb3J0IENvbXBhcmF0b3IgZnJvbSBcIi4vdXRpbHMvY29tcGFyYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmlvcml0eVF1ZXVlcyB7XG4gICAgc3RhdGljIHJ1biAoKSB7XG4gICAgICAgIGNvbnN0IHByaW9yaXR5UXVldWUgPSBuZXcgUHJpb3JpdHlRdWV1ZSgpO1xuICAgICAgICAgICAgICBwcmlvcml0eVF1ZXVlLmFkZCgxMDAsIDApO1xuICAgICAgICAgICAgICBwcmlvcml0eVF1ZXVlLmFkZCgxMSwgMik7XG4gICAgICAgICAgICAgIHByaW9yaXR5UXVldWUuYWRkKDUwMCwgMyk7XG4gICAgICAgICAgICAgIHByaW9yaXR5UXVldWUuYWRkKDUwMSwgNCk7XG4gICAgICAgICAgICAgIHByaW9yaXR5UXVldWUuYWRkKDEwMSwgMSk7XG5cbiAgICAgICAgY29uc29sZS5sb2cocHJpb3JpdHlRdWV1ZSk7XG4gICAgfVxufVxuXG5jbGFzcyBQcmlvcml0eVF1ZXVlIGV4dGVuZHMgSGVhcE1pbiB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMucHJpb3JpdGllcyA9IHt9O1xuXG4gICAgICAgIHRoaXMuY29tcGFyZSA9IG5ldyBDb21wYXJhdG9yKHRoaXMuY29tcGFyZVByaW9yaXR5LmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIGFkZCAoaXRlbSwgcHJpb3JpdHkgPSAwKSB7XG4gICAgICAgIHRoaXMucHJpb3JpdGllc1tpdGVtXSA9IHByaW9yaXR5O1xuXG4gICAgICAgIHN1cGVyLmFkZChpdGVtKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5wcmlvcml0aWVzO1xuICAgIH1cblxuICAgIHJlbW92ZSAoaXRlbSwgY3VzdG9tRmluZGluZ0NvbXBhcmF0b3IpIHtcbiAgICAgICAgc3VwZXIucmVtb3ZlKGl0ZW0sIGN1c3RvbUZpbmRpbmdDb21wYXJhdG9yKTtcblxuICAgICAgICBkZWxldGUgdGhpcy5wcmlvcml0aWVzW2l0ZW1dO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnByaW9yaXRpZXM7XG4gICAgfVxuXG4gICAgY2hhbmdlUHJpb3JpdHkgKGl0ZW0sIHByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKGl0ZW0sIG5ldyBDb21wYXJhdG9yKHRoaXMuY29tcGFyZVZhbHVlKSk7XG4gICAgICAgIHRoaXMuYWRkKGl0ZW0sIHByaW9yaXR5KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5wcmlvcml0aWVzO1xuICAgIH1cblxuICAgIGZpbmRCeVZhbHVlIChpdGVtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmQoaXRlbSwgbmV3IENvbXBhcmF0b3IodGhpcy5jb21wYXJlVmFsdWUpKTtcbiAgICB9XG5cbiAgICBoYXNWYWx1ZSAoaXRlbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5maW5kQnlWYWx1ZShpdGVtKS5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIGNvbXBhcmVWYWx1ZSAoYSwgYikge1xuICAgICAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYSA8IGIgPyAtMSA6IDE7XG4gICAgfVxuXG4gICAgY29tcGFyZVByaW9yaXR5IChhLCBiKSB7XG4gICAgICAgIGlmICh0aGlzLnByaW9yaXRpZXNbYV0gPT09IHRoaXMucHJpb3JpdGllc1tiXSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5wcmlvcml0aWVzW2FdIDwgdGhpcy5wcmlvcml0aWVzW2JdID8gLTEgOiAxO1xuICAgIH1cbn1cbiIsImNsYXNzIFByb21pc2VzIHtcbiAgZ2V0V29ya0RvbmUgKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZXNvbHZlKCdXZWxsIGRvbmUuJyk7XG4gICAgICByZWplY3QoJ05vdCB0aGlzIHRpbWUuJyk7XG4gICAgfSk7XG4gIH1cblxuICByZWFkICgpIHtcbiAgICByZXR1cm4gUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZXNvbHZlKCdDYXVzZSBpcyByZXNvbHZpbmcgdGhpcyBpbiB0aGUgXCJOZWF1cm9tYW5jZXJcIi4nKTtcbiAgICAgIHJlamVjdCgnT3d3LCBJIGRvblxcJ3QgZXZlbiByZW1lbWJlciB3aGF0XFwncyB3aGF0LicpO1xuICAgIH0pO1xuICB9XG5cbiAgZ29TbGVlcCAoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICByZXEub3BlbignR0VUJywgJ2h0dHA6Ly9nb29nbGUucGwnKTtcblxuICAgICAgcmVzb2x2ZShyZXEpO1xuICAgICAgcmVqZWN0KCdPZmZsaW5lLicpO1xuICAgIH0pO1xuICB9XG5cbiAgY2hhaW5pbmcgKCkge1xuICAgIHZhciBmYWtlWGhyID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIGluY29taW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmVzb2x2ZSgnRG9uZS4nKTtcbiAgICAgICAgfSwgMTAwMCk7XG5cbiAgICAgICAgcmV0dXJuIGluY29taW5nO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgdHJhbnNmb3JtUmVzID0gZnVuY3Rpb24gKHJlcykge1xuICAgICAgcmV0dXJuIFN0cmluZyhyZXMpLnRvVXBwZXJDYXNlKCk7XG4gICAgfTtcblxuICAgIGZha2VYaHIoKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1SZXMocmVzKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH0pO1xuXG4gICAgdmFyIGdvdEl0ID0gZnVuY3Rpb24gKHJlcykge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybVJlcyhyZXMpO1xuICAgIH07XG5cbiAgICBmYWtlWGhyKCkgLy8gc28gYmV1dGlmdWwgOkRcbiAgICAgIC50aGVuKGdvdEl0KVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKGdvdEl0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGdvdEl0KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgY2hhaW5pbmcyICgpIHtcbiAgICB2YXIgdGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBtc2cgPSAnQW5vdGhlciBwcm9taXNlLic7XG4gICAgICAgICAgY29uc29sZS5sb2cobXNnKTtcbiAgICAgICAgICByZXNvbHZlKG1zZyk7XG4gICAgICAgIH0sIDIwMDApO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgbW9yZVRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgbXNnID0gJ0FuZCBhbm90aGVyIG9uZS4uLic7XG4gICAgICAgICAgY29uc29sZS5sb2cobXNnKTtcbiAgICAgICAgICByZXNvbHZlKG1zZyk7XG4gICAgICAgIH0sIDIwMDApO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICB0aW1lKClcbiAgICAgIC50aGVuKG1vcmVUaW1lKTtcbiAgfVxuXG4gIHRyYW5zZm9ybVJlcyAocmVzKSB7XG4gICAgcmV0dXJuIFN0cmluZyhyZXMpLnRvVXBwZXJDYXNlKCk7XG4gIH07XG5cbiAgcmVxIChkb25lKSB7XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbignR0VUJywgJy8nKTtcbiAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkb25lKG51bGwsIHhoci5yZXNwb25zZSk7XG4gICAgICAgIH07XG4gICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRvbmUoeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgeGhyLnNlbmQoKTtcblxuICAgIHJldHVybiB4aHI7XG4gIH07XG5cbiAgcmFjZSAoKSB7XG4gICAgUHJvbWlzZS5yYWNlKFtcbiAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKCdTb21lIHBvc3NpYmxlIHRpbWVvdXQgZXJyLicpKSwgMSlcbiAgICAgIH0pLFxuICAgICAgZmV0Y2goJy8nKVxuICAgIF0pXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4gY29uc29sZS5sb2cocmVzcG9uc2UpKVxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSk7XG4gIH1cblxuICBydW4gKCkge1xuICAgIHRoaXMuY2hhaW5pbmcoKTtcbiAgICB0aGlzLmNoYWluaW5nMigpO1xuICAgIHRoaXMucmVxKGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhkYXRhLmxlbmd0aCk7XG4gICAgfSk7XG4gICAgdGhpcy5yYWNlKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvbWlzZXM7XG4iLCJpbXBvcnQge0xpbmtlZExpc3R9IGZyb20gJy4vbGlua2VkLWxpc3RzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVldWVzIHtcbiAgICBzdGF0aWMgcnVuICgpIHtcbiAgICAgICAgY29uc3QgcXVldWUgPSBuZXcgUXVldWUoKTtcblxuICAgICAgICBxdWV1ZS5lbnF1ZXVlKDEpO1xuICAgICAgICBjb25zb2xlLmxvZyhxdWV1ZS50b1N0cmluZygpKTtcbiAgICAgICAgcXVldWUuZW5xdWV1ZSgzKTtcbiAgICAgICAgY29uc29sZS5sb2cocXVldWUudG9TdHJpbmcoKSk7XG4gICAgICAgIHF1ZXVlLmVucXVldWUoNSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHF1ZXVlLnRvU3RyaW5nKCkpO1xuICAgICAgICBxdWV1ZS5kZXF1ZXVlKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhZnRlciBkZXF1ZXVlJywgcXVldWUudG9TdHJpbmcoKSk7XG4gICAgICAgIHF1ZXVlLmVucXVldWUoMSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhZnRlciBlbnF1ZXVlJywgcXVldWUudG9TdHJpbmcoKSk7XG4gICAgfVxufVxuXG5jbGFzcyBRdWV1ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubGlua2VkTGlzdCA9IG5ldyBMaW5rZWRMaXN0KCk7XG4gICAgfVxuXG4gICAgaXNFbXB0eSAoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5saW5rZWRMaXN0LnRhaWw7XG4gICAgfVxuXG4gICAgcGVlayAoKSB7XG4gICAgICAgIGlmICghdGhpcy5saW5rZWRMaXN0LmhlYWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlua2VkTGlzdC5oZWFkLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZW5xdWV1ZSAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5saW5rZWRMaXN0LmFwcGVuZCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZGVxdWV1ZSAoKSB7XG4gICAgICAgIGNvbnN0IHJlbW92ZWRIZWFkID0gdGhpcy5saW5rZWRMaXN0LmRlbGV0ZUhlYWQoKTtcblxuICAgICAgICByZXR1cm4gcmVtb3ZlZEhlYWQgPyByZW1vdmVkSGVhZC52YWx1ZSA6IG51bGw7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlua2VkTGlzdC50b1N0cmluZyhjYWxsYmFjayk7XG4gICAgfVxufVxuIiwiY2xhc3MgUmVjdXJzaW9ucyB7XG4gIGZyYWN0b3JpYWwgKCkge1xuICAgIGNvbnN0IGZyYWN0b3JpYWwgPSBuID0+IHtcbiAgICAgIGlmIChuIDwgMCkgdGhyb3cgRXJyb3IoJ0l0XFwncyBmcmFjdG9yaWFsIG1hbi4uLicpO1xuICAgICAgaWYgKG4gPT09IDApIHJldHVybiAxO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBuICogKGZyYWN0b3JpYWwobiAtIDEpKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIGNvbnNvbGUubG9nKGZyYWN0b3JpYWwoMTcwKSk7IC8vIG1heFxuICB9XG5cbiAgZ2V0TWF4ICgpIHtcbiAgICBjb25zdCBzYW1wbGVBcnIgPSBbMCwxLDIsMyw0LDUsIDEwLCA2LDcsOCw5XTtcbiAgICBjb25zdCBnZXRNYXggPSBhcnIgPT4ge1xuICAgICAgY29uc3QgbnVtcyA9IGFyci5zbGljZSgpO1xuXG4gICAgICBpZiAobnVtcy5sZW5ndGggPT09IDEpIHJldHVybiBudW1zWzBdO1xuICAgICAgaWYgKG51bXNbMF0gPCBudW1zWzFdKSB7XG4gICAgICAgIG51bXMuc3BsaWNlKDAsIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbnVtcy5zcGxpY2UoMSwgMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRNYXgobnVtcyk7XG4gICAgfTtcbiAgICBjb25zb2xlLmxvZyhnZXRNYXgoc2FtcGxlQXJyKSk7XG4gIH1cblxuICBzd2ltbWluZ0NvdW50aW5nKCkge1xuICAgIGNvbnN0IGl0ZXJhdGUgPSBuID0+IHtcbiAgICAgIGNvbnNvbGUudGltZSgnaXRlcmF0ZScpO1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gbjsgaSsrKSB7XG4gICAgICAgIGlmIChpID09PSBuKSB7XG4gICAgICAgICAgY29uc29sZS50aW1lRW5kKCdpdGVyYXRlJyk7XG4gICAgICAgICAgY29uc29sZS5sb2coJ0JyZWFrLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCByZWN1cnNlID0gbiA9PiB7XG4gICAgICBjb25zb2xlLnRpbWUoJ3JlY3Vyc2UnKTtcbiAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUudGltZUVuZCgncmVjdXJzZScpO1xuICAgICAgICBjb25zb2xlLmxvZygnQnJlYWsuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgbm4gPSBuIC0gMTtcbiAgICAgICAgcmVjdXJzZShubik7XG4gICAgICB9XG4gICAgICAvLyBjb25zb2xlLmxvZyhuKTsgLy8gZm9yIGxvb3AgOkRcbiAgICB9O1xuICAgIGl0ZXJhdGUoODAwMSk7XG4gICAgcmVjdXJzZSg3Mzc5KTsgLy8gY2FsbCBzdGFjayBzaXplIC0oK2RlZ3JlZSlcbiAgfVxuXG4gIGdyb3cgKCkge1xuICAgIGNvbnN0IGdyb3cgPSBuID0+IHtcbiAgICAgIGlmIChuIDw9IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChuIDw9IDIpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ3JvdyhuIC0gMSkgKyBncm93KG4gLSAyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnNvbGUubG9nKGdyb3coOCkpO1xuICB9XG5cbiAgcmV2ZXJzZVN0cmluZyAoKSB7XG4gICAgY29uc3QgcmV2ZXJzZVN0cmluZyA9IHN0cmluZyA9PiB7XG4gICAgICBpZiAoc3RyaW5nID09PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJldmVyc2VTdHJpbmcoc3RyaW5nLnN1YnN0cmluZygxKSkgKyBzdHJpbmcuY2hhckF0KDApO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc29sZS5sb2cocmV2ZXJzZVN0cmluZygnbGl2ZSAsZXZpbCcpKTtcbiAgfVxuXG4gIHJ1biAoKSB7XG4gICAgdGhpcy5mcmFjdG9yaWFsKCk7XG4gICAgdGhpcy5nZXRNYXgoKTtcbiAgICB0aGlzLnN3aW1taW5nQ291bnRpbmcoKTtcbiAgICB0aGlzLmdyb3coKTtcbiAgICB0aGlzLnJldmVyc2VTdHJpbmcoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWN1cnNpb25zO1xuIiwiaW1wb3J0IHtMaW5rZWRMaXN0fSBmcm9tICcuL2xpbmtlZC1saXN0cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YWNrcyB7XG4gICAgc3RhdGljIHJ1biAoKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG5cbiAgICAgICAgc3RhY2sucHVzaCgxKTtcbiAgICAgICAgY29uc29sZS5sb2coc3RhY2sudG9TdHJpbmcoKSk7XG4gICAgICAgIHN0YWNrLnB1c2goMyk7XG4gICAgICAgIGNvbnNvbGUubG9nKHN0YWNrLnRvU3RyaW5nKCkpO1xuICAgICAgICBzdGFjay5wdXNoKDUpO1xuICAgICAgICBjb25zb2xlLmxvZyhzdGFjay50b1N0cmluZygpKTtcbiAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhZnRlciBwb3AnLCBzdGFjay50b1N0cmluZygpKTtcbiAgICAgICAgc3RhY2sucHVzaCgxMDApO1xuICAgICAgICBjb25zb2xlLmxvZygnYWZ0ZXIgcHVzaCcsIHN0YWNrLnRvU3RyaW5nKCkpO1xuICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgICAgY29uc29sZS5sb2coJ2FmdGVyIHBvcCcsIHN0YWNrLnRvU3RyaW5nKCkpO1xuICAgIH1cbn1cblxuY2xhc3MgU3RhY2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmxpbmtlZExpc3QgPSBuZXcgTGlua2VkTGlzdCgpO1xuICAgIH1cblxuICAgIGlzRW1wdHkgKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMubGlua2VkTGlzdC50YWlsO1xuICAgIH1cblxuICAgIHBlZWsgKCkge1xuICAgICAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlua2VkTGlzdC50YWlsLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVzaCAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5saW5rZWRMaXN0LmFwcGVuZCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcG9wICgpIHtcbiAgICAgICAgY29uc3QgcmVtb3ZlZFRhaWwgPSB0aGlzLmxpbmtlZExpc3QuZGVsZXRlVGFpbCgpO1xuXG4gICAgICAgIHJldHVybiByZW1vdmVkVGFpbCA/IHJlbW92ZWRUYWlsLnZhbHVlIDogbnVsbDtcbiAgICB9XG5cbiAgICB0b1N0cmluZyhjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5saW5rZWRMaXN0LnRvU3RyaW5nKGNhbGxiYWNrKTtcbiAgICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wYXJhdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb21wYXJlRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jb21wYXJlID0gY29tcGFyZUZ1bmN0aW9uIHx8IENvbXBhcmF0b3IuZGVmYXVsdENvbXBhcmVGdW5jdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKX0gYVxuICAgICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpfSBiXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBzdGF0aWMgZGVmYXVsdENvbXBhcmVGdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhIDwgYiA/IC0xIDogMTtcbiAgICB9XG5cbiAgICBlcXVhbChhLCBiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmUoYSwgYikgPT09IDA7XG4gICAgfVxuXG4gICAgbGVzc1RoYW4oYSwgYikge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKGEsIGIpIDwgMDtcbiAgICB9XG5cbiAgICBncmVhdGVyVGhhbihhLCBiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmUoYSwgYikgPiAwO1xuICAgIH1cblxuICAgIGxlc3NUaGFuT3JFcXVhbChhLCBiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlc3NUaGFuKGEsIGIpIHx8IHRoaXMuZXF1YWwoYSwgYik7XG4gICAgfVxuXG4gICAgZ3JlYXRlclRoYW5PckVxdWFsKGEsIGIpIHtcbiAgICAgICAgY29uc29sZS5sb2coYSwgYilcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JlYXRlclRoYW4oYSwgYikgfHwgdGhpcy5lcXVhbChhLCBiKTtcbiAgICB9XG5cbiAgICByZXZlcnNlKCkge1xuICAgICAgICBjb25zdCBjb21wYXJlT3JpZ2luYWwgPSB0aGlzLmNvbXBhcmU7XG4gICAgICAgIHRoaXMuY29tcGFyZSA9IChhLCBiKSA9PiBjb21wYXJlT3JpZ2luYWwoYiwgYSk7XG4gICAgfVxufVxuIl19"}